{"version":3,"file":"static/iframe.bfa8798cb0a9b3dfbe6b.bundle.js","sources":["webpack:///./config/storybook/config.js","webpack:///./src/components/Canvas/Canvas.wrapper.tsx","webpack:///./src/components/Canvas/CanvasInner.default.tsx","webpack:///./src/components/Canvas/CanvasOuter.default.tsx","webpack:///./src/components/Canvas/index.tsx","webpack:///./src/components/FlowChart/FlowChart.tsx","webpack:///./src/components/FlowChart/index.ts","webpack:///./src/components/Link/Link.default.tsx","webpack:///./src/components/Link/Link.wrapper.tsx","webpack:///./src/components/Link/index.ts","webpack:///./src/components/Link/utils/generateCurvePath.ts","webpack:///./src/components/Link/utils/getLinkPosition.ts","webpack:///./src/components/Link/utils/index.ts","webpack:///./src/components/Node/Node.default.tsx","webpack:///./src/components/Node/Node.wrapper.tsx","webpack:///./src/components/Node/index.ts","webpack:///./src/components/NodeInner/NodeInner.default.tsx","webpack:///./src/components/NodeInner/index.ts","webpack:///./src/components/Port/Port.default.tsx","webpack:///./src/components/Port/Port.wrapper.tsx","webpack:///./src/components/Port/index.ts","webpack:///./src/components/Ports/Ports.default.tsx","webpack:///./src/components/Ports/index.ts","webpack:///./src/components/PortsGroup/PortsGroup.default.tsx","webpack:///./src/components/PortsGroup/index.ts","webpack:///./src/components/index.ts","webpack:///./src/constants.ts","webpack:///./src/container/FlowChartWithState.tsx","webpack:///./src/container/actions.ts","webpack:///./src/container/index.ts","webpack:///./src/index.ts","webpack:///./stories sync \\.tsx","webpack:///./stories/CustomCanvasOuter.tsx","webpack:///./stories/CustomNode.tsx","webpack:///./stories/CustomNodeInner.tsx","webpack:///./stories/CustomPort.tsx","webpack:///./stories/DragAndDropSidebar.tsx","webpack:///./stories/ExternalReactState.tsx","webpack:///./stories/InternalReactState.tsx","webpack:///./stories/SelectedSidebar.tsx","webpack:///./stories/StressTest.tsx","webpack:///./stories/components/Content.tsx","webpack:///./stories/components/Page.tsx","webpack:///./stories/components/Sidebar.tsx","webpack:///./stories/components/SidebarItem.tsx","webpack:///./stories/components/index.ts","webpack:///./stories/index.tsx","webpack:///./stories/misc/exampleChartState.ts"],"sourcesContent":["import { setOptions } from \"@storybook/addon-options\"\nimport { configure } from \"@storybook/react\"\n// import { configureViewport, INITIAL_VIEWPORTS } from \"@storybook/addon-viewport\"\n\nsetOptions({\n\thierarchySeparator: /\\/|\\./,\n\thierarchyRootSeparator: /\\|/,\n})\n\n// configureViewport({\n// \tviewports: {\n// \t\t...INITIAL_VIEWPORTS\n// \t}\n// })\n\nfunction requireAll(requireContext) {\n\treturn requireContext.keys().map(requireContext);\n}\n\nfunction loadStories() {\n\trequireAll(require.context(\"../../stories\", true, /\\.tsx?$/));\n}\n\nconfigure(loadStories, module);","import * as React from 'react'\nimport Draggable from 'react-draggable'\nimport { IOnCanvasClick, IOnCanvasDrop, IOnDeleteKey, IOnDragCanvas, REACT_FLOW_CHART } from '../../'\nimport { ICanvasInnerDefaultProps } from './CanvasInner.default'\nimport { ICanvasOuterDefaultProps } from './CanvasOuter.default'\n\nexport interface ICanvasWrapperProps {\n  position: {\n    x: number\n    y: number,\n  }\n  onDragCanvas: IOnDragCanvas\n  onDeleteKey: IOnDeleteKey\n  onCanvasClick: IOnCanvasClick\n  onCanvasDrop: IOnCanvasDrop\n  ComponentInner: React.SFC<ICanvasInnerDefaultProps>\n  ComponentOuter: React.SFC<ICanvasOuterDefaultProps>\n  children: any\n}\n\nexport class CanvasWrapper extends React.Component<ICanvasWrapperProps> {\n  public render () {\n    const {\n      ComponentInner,\n      ComponentOuter,\n      position,\n      onDragCanvas,\n      children,\n      onCanvasClick,\n      onDeleteKey,\n      onCanvasDrop,\n    } = this.props\n\n    return (\n      <ComponentOuter>\n        <Draggable\n          axis=\"both\"\n          position={position}\n          grid={[1, 1]}\n          onDrag={(e, dragData) => onDragCanvas(e, dragData)}\n        >\n          <ComponentInner\n            children={children}\n            onClick={onCanvasClick}\n            tabIndex={0}\n            onKeyDown={ (e: React.KeyboardEvent) => {\n              if (e.keyCode === 46) {\n                onDeleteKey()\n              }\n            }}\n            onDrop={ (e) => {\n              const data = JSON.parse(e.dataTransfer.getData(REACT_FLOW_CHART))\n              onCanvasDrop({ data, position: {\n                x: e.clientX - position.x,\n                y: e.clientY - position.y,\n              }})\n            } }\n            onDragOver={ (e) => {\n              e.preventDefault()\n            } }\n          />\n        </Draggable>\n      </ComponentOuter>\n    )\n  }\n}\n","import styled from 'styled-components'\r\nimport { IOnCanvasClick } from '../../'\r\n\r\nexport interface ICanvasInnerDefaultProps {\r\n  children: any\r\n  onClick: IOnCanvasClick\r\n  tabIndex: number\r\n  onKeyDown: (e: React.KeyboardEvent) => void\r\n  onDrop: (e: React.DragEvent<HTMLDivElement>) => void\r\n  onDragOver: (e: React.DragEvent<HTMLDivElement>) => void\r\n}\r\n\r\nexport const CanvasInnerDefault = styled.div<ICanvasInnerDefaultProps>`\r\n  position: relative;\r\n  outline: 1px dashed rgba(0,0,0,0.1);\r\n  width: 10000px;\r\n  height: 10000px;\r\n  cursor: move;\r\n` as any\r\n","import styled from 'styled-components'\r\n\r\nexport interface ICanvasOuterDefaultProps {\r\n  children: any\r\n}\r\n\r\nexport const CanvasOuterDefault = styled.div<ICanvasOuterDefaultProps>`\r\n  position: relative;\r\n  background-size: 20px 20px;\r\n  background-color: rgba(0,0,0,0.08);\r\n  background-image:\r\n    linear-gradient(90deg,hsla(0,0%,100%,.2) 1px,transparent 0),\r\n    linear-gradient(180deg,hsla(0,0%,100%,.2) 1px,transparent 0);\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  cursor: not-allowed;\r\n` as any\r\n","export * from './CanvasInner.default'\r\nexport * from './CanvasOuter.default'\r\nexport * from './Canvas.wrapper'\r\n","import { map } from 'lodash'\r\nimport * as React from 'react'\r\nimport {\r\n  CanvasInnerDefault, CanvasOuterDefault, CanvasWrapper, ICanvasInnerDefaultProps, ICanvasOuterDefaultProps, IChart, ILinkDefaultProps,\r\n  INodeDefaultProps, INodeInnerDefaultProps, IOnCanvasClick, IOnCanvasDrop, IOnDeleteKey, IOnDragCanvas, IOnDragNode,\r\n  IOnLinkCancel, IOnLinkClick, IOnLinkComplete, IOnLinkMouseEnter, IOnLinkMouseLeave, IOnLinkMove,\r\n  IOnLinkStart, IOnNodeClick, IOnPortPositionChange, IPortDefaultProps, IPortsDefaultProps, LinkDefault, LinkWrapper,\r\n  NodeDefault, NodeInnerDefault, NodeWrapper, PortDefault, PortsDefault, PortWrapper,\r\n} from '../../'\r\n\r\nexport interface IFlowChartCallbacks {\r\n  onDragNode: IOnDragNode\r\n  onDragCanvas: IOnDragCanvas\r\n  onCanvasDrop: IOnCanvasDrop\r\n  onLinkStart: IOnLinkStart\r\n  onLinkMove: IOnLinkMove\r\n  onLinkComplete: IOnLinkComplete\r\n  onLinkCancel: IOnLinkCancel\r\n  onPortPositionChange: IOnPortPositionChange\r\n  onLinkMouseEnter: IOnLinkMouseEnter\r\n  onLinkMouseLeave: IOnLinkMouseLeave\r\n  onLinkClick: IOnLinkClick\r\n  onCanvasClick: IOnCanvasClick\r\n  onDeleteKey: IOnDeleteKey\r\n  onNodeClick: IOnNodeClick\r\n}\r\n\r\nexport interface IFlowChartComponents {\r\n  CanvasOuter?: React.SFC<ICanvasOuterDefaultProps>\r\n  CanvasInner?: React.SFC<ICanvasInnerDefaultProps>\r\n  NodeInner?: React.SFC<INodeInnerDefaultProps>\r\n  Ports?: React.SFC<IPortsDefaultProps>\r\n  Port?: React.SFC<IPortDefaultProps>\r\n  Node?: React.SFC<INodeDefaultProps>\r\n  Link?: React.SFC<ILinkDefaultProps>\r\n}\r\n\r\nexport interface IFlowChartProps {\r\n  /**\r\n   * The current chart state\r\n   */\r\n  chart: IChart\r\n  /**\r\n   * Callbacks for updating chart state.\r\n   * See container/actions.ts for example state mutations\r\n   */\r\n  callbacks: IFlowChartCallbacks\r\n  /**\r\n   * Custom components\r\n   */\r\n  Components?: IFlowChartComponents\r\n}\r\n\r\nexport const FlowChart = (props: IFlowChartProps) => {\r\n  const {\r\n    chart,\r\n    callbacks: {\r\n      onDragNode,\r\n      onDragCanvas,\r\n      onCanvasDrop,\r\n      onLinkStart,\r\n      onLinkMove,\r\n      onLinkComplete,\r\n      onLinkCancel,\r\n      onPortPositionChange,\r\n      onLinkMouseEnter,\r\n      onLinkMouseLeave,\r\n      onLinkClick,\r\n      onCanvasClick,\r\n      onDeleteKey,\r\n      onNodeClick,\r\n    },\r\n    Components: {\r\n      CanvasOuter = CanvasOuterDefault,\r\n      CanvasInner = CanvasInnerDefault,\r\n      NodeInner = NodeInnerDefault,\r\n      Ports = PortsDefault,\r\n      Port = PortDefault,\r\n      Node = NodeDefault,\r\n      Link = LinkDefault,\r\n    } = {},\r\n  } = props\r\n  const { links, nodes, selected } = chart\r\n\r\n  const canvasCallbacks = { onDragCanvas, onCanvasClick, onDeleteKey, onCanvasDrop }\r\n  const linkCallbacks = { onLinkMouseEnter, onLinkMouseLeave, onLinkClick }\r\n  const nodeCallbacks = { onDragNode, onNodeClick }\r\n  const portCallbacks = { onPortPositionChange, onLinkStart, onLinkMove, onLinkComplete, onLinkCancel }\r\n\r\n  return (\r\n    <CanvasWrapper\r\n      position={chart.offset}\r\n      ComponentInner={CanvasInner}\r\n      ComponentOuter={CanvasOuter}\r\n      {...canvasCallbacks}\r\n    >\r\n      { map(links, (link) => (\r\n        <LinkWrapper\r\n          chart={chart}\r\n          key={link.id}\r\n          link={link}\r\n          Component={Link}\r\n          {...linkCallbacks}\r\n        />\r\n      ))}\r\n      { map(nodes, (node) => (\r\n        <NodeWrapper\r\n          key={node.id}\r\n          node={node}\r\n          selected={selected}\r\n          Component={Node}\r\n          {...nodeCallbacks}\r\n        >\r\n          <NodeInner node={node}/>\r\n          <Ports>\r\n            { map(node.ports, (port) => (\r\n              <PortWrapper\r\n                key={port.id}\r\n                chart={chart}\r\n                node={node}\r\n                port={port}\r\n                Component={Port}\r\n                {...portCallbacks}\r\n              />\r\n            )) }\r\n          </Ports>\r\n        </NodeWrapper>\r\n      ))}\r\n    </CanvasWrapper>\r\n  )\r\n}\r\n","export * from './FlowChart'\r\n","import * as React from 'react'\nimport { generateCurvePath, ILink, IOnLinkClick, IOnLinkMouseEnter, IOnLinkMouseLeave, IPosition } from '../../'\n\nexport interface ILinkDefaultProps {\n  link: ILink\n  startPos: IPosition\n  endPos: IPosition\n  onLinkMouseEnter: IOnLinkMouseEnter\n  onLinkMouseLeave: IOnLinkMouseLeave\n  onLinkClick: IOnLinkClick\n  isHovered: boolean\n  isSelected: boolean\n}\n\nexport const LinkDefault = ({\n  link,\n  startPos,\n  endPos,\n  onLinkMouseEnter,\n  onLinkMouseLeave,\n  onLinkClick,\n  isHovered,\n  isSelected,\n}: ILinkDefaultProps) => {\n  const points = generateCurvePath(startPos, endPos)\n\n  return (\n    <svg style={{ overflow: 'visible', position: 'absolute', cursor: 'pointer', left: 0, right: 0 }}>\n      <circle\n        r=\"4\"\n        cx={startPos.x}\n        cy={startPos.y}\n        fill=\"cornflowerblue\"\n      />\n      {/* Main line */}\n      <path\n        d={points}\n        stroke=\"cornflowerblue\"\n        strokeWidth=\"3\"\n        fill=\"none\"\n      />\n      {/* Thick line to make selection easier */}\n      <path\n        d={points}\n        stroke=\"cornflowerblue\"\n        strokeWidth=\"20\"\n        fill=\"none\"\n        strokeLinecap=\"round\"\n        strokeOpacity={(isHovered || isSelected) ? 0.1 : 0}\n        onMouseEnter={() => onLinkMouseEnter({ linkId: link.id })}\n        onMouseLeave={() => onLinkMouseLeave({ linkId: link.id })}\n        onClick={(e) => {\n          onLinkClick({ linkId: link.id })\n          e.stopPropagation()\n        } }\n      />\n      <circle\n        r=\"4\"\n        cx={endPos.x}\n        cy={endPos.y}\n        fill=\"cornflowerblue\"\n      />\n    </svg>\n  )\n}\n","import * as React from 'react'\r\nimport { IChart, ILink, IOnLinkMouseEnter, IOnLinkMouseLeave } from '../../'\r\nimport { ILinkDefaultProps, LinkDefault } from './Link.default'\r\nimport { getLinkPosition } from './utils'\r\n\r\nexport interface ILinkWrapperProps {\r\n  link: ILink\r\n  chart: IChart\r\n  onLinkMouseEnter: IOnLinkMouseEnter\r\n  onLinkMouseLeave: IOnLinkMouseLeave\r\n  onLinkClick: IOnLinkMouseLeave\r\n  Component?: React.SFC<ILinkDefaultProps>\r\n}\r\n\r\nexport const LinkWrapper = ({\r\n  Component = LinkDefault,\r\n  link,\r\n  chart,\r\n  onLinkMouseEnter,\r\n  onLinkMouseLeave,\r\n  onLinkClick,\r\n}: ILinkWrapperProps) => {\r\n  const startPos = getLinkPosition(chart, link.from.nodeId, link.from.portId)\r\n\r\n  const endPos = link.to.nodeId && link.to.portId\r\n    ? getLinkPosition(chart, link.to.nodeId, link.to.portId)\r\n    : link.to.position\r\n\r\n  // Don't render the link yet if there is no end pos\r\n  // This will occur if the link was just created\r\n  if (!endPos) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Component\r\n      link={link}\r\n      startPos={startPos}\r\n      endPos={endPos}\r\n      onLinkMouseEnter={onLinkMouseEnter}\r\n      onLinkMouseLeave={onLinkMouseLeave}\r\n      onLinkClick={onLinkClick}\r\n      isSelected={chart.selected.type === 'link' && chart.selected.id === link.id}\r\n      isHovered={chart.hovered.type === 'link' && chart.hovered.id === link.id}\r\n    />\r\n  )\r\n}\r\n","export * from './Link.default'\r\nexport * from './Link.wrapper'\r\nexport * from './utils'\r\n","import { IPosition } from '../../../'\n\nexport const generateCurvePath = (startPos: IPosition, endPos: IPosition): string => {\n  const width = Math.abs(startPos.x - endPos.x)\n  const height = Math.abs(startPos.y - endPos.y)\n  const leftToRight = startPos.x < endPos.x\n  const topToBottom = startPos.y < endPos.y\n  const isHorizontal = width > height\n\n  let start\n  let end\n  if (isHorizontal) {\n    start = leftToRight ? startPos : endPos\n    end = leftToRight ? endPos : startPos\n  } else {\n    start = topToBottom ? startPos : endPos\n    end = topToBottom ? endPos : startPos\n  }\n\n  const curve = isHorizontal ? width / 3 : height / 3\n  const curveX = isHorizontal ? curve : 0\n  const curveY = isHorizontal ? 0 : curve\n\n  return `M${start.x},${start.y} C ${start.x + curveX},${start.y + curveY} ${end.x - curveX},${end.y - curveY} ${end.x},${end.y}`\n}\n","import { IChart, IPosition } from '../../../'\r\n\r\nexport const getLinkPosition = (chart: IChart, nodeId: string, portId: string): IPosition => {\r\n  const node = chart.nodes[nodeId]\r\n  const port = node.ports[portId]\r\n  return {\r\n    x: node.position.x + (port.position ? port.position.x : 0),\r\n    y: node.position.y + (port.position ? port.position.y : 0),\r\n  }\r\n}\r\n","export * from './getLinkPosition'\nexport * from './generateCurvePath'\n","import styled, { css } from 'styled-components'\r\nimport { INode } from '../../'\r\n\r\nexport interface INodeDefaultProps {\r\n  node: INode\r\n  children: any\r\n  isSelected: boolean\r\n  onClick: (e: React.MouseEvent) => void\r\n  style?: object\r\n}\r\n\r\nexport const NodeDefault = styled.div<INodeDefaultProps>`\r\n  position: absolute;\r\n  transition: 0.3s ease box-shadow, 0.3s ease margin-top;\r\n  background: white;\r\n  border-radius: 4px;\r\n  min-width: 200px;\r\n  ${(props) => props.isSelected && css`\r\n    box-shadow: 0 10px 20px rgba(0,0,0,.1);\r\n    margin-top: -2px\r\n    `\r\n  }\r\n` as any\r\n","import * as React from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport { INode, IOnDragNode, IOnNodeClick, ISelectedOrHovered } from '../../'\r\nimport { INodeDefaultProps, NodeDefault } from './Node.default'\r\n\r\nexport interface INodeWrapperProps {\r\n  node: INode\r\n  onDragNode: IOnDragNode\r\n  onNodeClick: IOnNodeClick\r\n  children: any\r\n  selected: ISelectedOrHovered\r\n  Component?: React.SFC<INodeDefaultProps>\r\n}\r\n\r\nexport const NodeWrapper = ({\r\n  node,\r\n  onDragNode,\r\n  children,\r\n  onNodeClick,\r\n  selected,\r\n  Component = NodeDefault,\r\n}: INodeWrapperProps) => {\r\n  return (\r\n    <Draggable\r\n      bounds=\"parent\"\r\n      axis=\"both\"\r\n      position={node.position}\r\n      grid={[1,1]}\r\n      onStart={ (e) => {\r\n        // Stop propagation so the canvas does not move\r\n        e.stopPropagation()\r\n      }}\r\n      onDrag={(e, dragData) => onDragNode(e, dragData, node.id)}\r\n    >\r\n      <Component\r\n        children={children}\r\n        onClick={(e) => {\r\n          onNodeClick({ nodeId: node.id })\r\n          e.stopPropagation()\r\n        }}\r\n        isSelected={selected.type === 'node' && selected.id === node.id}\r\n        node={node}\r\n      />\r\n    </Draggable>\r\n  )\r\n}\r\n","export * from './Node.default'\r\nexport * from './Node.wrapper'\r\nexport * from './Node.default'\r\n","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport { INode } from '../../'\r\n\r\nexport interface INodeInnerDefaultProps {\r\n  node: INode\r\n}\r\n\r\nconst Outer = styled.div`\r\n  padding: 40px 30px;\r\n`\r\n\r\nexport const NodeInnerDefault = ({ node }: INodeInnerDefaultProps) => {\r\n  return (\r\n    <Outer>\r\n      <div>Type: {node.type}</div>\r\n    </Outer>\r\n  )\r\n}\r\n","export * from './NodeInner.default'\r\n","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport { IPort } from '../../'\r\n\r\nexport interface IPortDefaultProps {\r\n  port: IPort\r\n  isSelected: boolean\r\n  isHovered: boolean\r\n  isLinkSelected: boolean\r\n  isLinkHovered: boolean\r\n}\r\n\r\nconst PortDefaultOuter = styled.div`\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  background: white;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  &:hover > div {\r\n    background: cornflowerblue;\r\n  }\r\n`\r\n\r\nconst PortDefaultInner = styled.div<{ active: boolean }>`\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background:  ${(props) => props.active ? 'cornflowerblue' : 'grey' };\r\n  cursor: pointer;\r\n`\r\n\r\nexport const PortDefault = ({ isLinkSelected, isLinkHovered }: IPortDefaultProps) => (\r\n  <PortDefaultOuter>\r\n    <PortDefaultInner\r\n      active={isLinkSelected || isLinkHovered}\r\n    />\r\n  </PortDefaultOuter>\r\n)\r\n","import * as React from 'react'\r\nimport { v4 } from 'uuid'\r\nimport {\r\n  IChart, INode, IOnLinkCancel, IOnLinkComplete, IOnLinkMove,\r\n   IOnLinkStart, IOnPortPositionChange, IPort,\r\n} from '../../'\r\nimport { IPortDefaultProps, PortDefault } from './Port.default'\r\n\r\nexport interface IPortWrapperProps {\r\n  style?: object\r\n  chart: IChart\r\n  port: IPort\r\n  node: INode\r\n  onPortPositionChange: IOnPortPositionChange\r\n  Component: React.SFC<IPortDefaultProps>\r\n\r\n  // Link handlers\r\n  onLinkStart: IOnLinkStart\r\n  onLinkMove: IOnLinkMove\r\n  onLinkCancel: IOnLinkCancel\r\n  onLinkComplete: IOnLinkComplete\r\n}\r\n\r\nexport class PortWrapper extends React.Component<IPortWrapperProps> {\r\n  public nodeRef?: HTMLDivElement\r\n  public getNodRef = (el: HTMLDivElement) => {\r\n    if (el) {\r\n      const { node, port, onPortPositionChange } = this.props\r\n      this.nodeRef = el\r\n\r\n      // Ports component should be positions absolute\r\n      // Factor this in so we get position relative to the node\r\n      const nodesEl = el.parentElement\r\n        ? el.parentElement\r\n        : { offsetLeft: 0, offsetTop: 0 }\r\n\r\n      const position = {\r\n        x: el.offsetLeft + nodesEl.offsetLeft + el.offsetWidth / 2,\r\n        y: el.offsetTop + nodesEl.offsetTop + el.offsetHeight / 2,\r\n      }\r\n      onPortPositionChange(node, port, position)\r\n    }\r\n  }\r\n  public onMouseDown = (startEvent: any) => {\r\n    const { chart, node, port, onLinkStart, onLinkCancel, onLinkComplete, onLinkMove } = this.props\r\n    const linkId = v4()\r\n    const fromNodeId = node.id\r\n    const fromPortId = port.id\r\n\r\n    // Create the move handler\r\n    // This will update the position as the mouse moves\r\n    const mouseMoveHandler = (e: MouseEvent) => {\r\n      onLinkMove({\r\n        linkId, startEvent, fromNodeId, fromPortId,\r\n        toPosition: {\r\n          x: e.clientX - chart.offset.x,\r\n          y: e.clientY - chart.offset.y,\r\n        },\r\n      })\r\n    }\r\n\r\n    // Create and bind the mouse up handler\r\n    // This is used to check if the link is complete or cancelled\r\n    const mouseUpHandler = (e: MouseEvent & { path: HTMLElement[] }) => {\r\n      // We traverse up the event path until we find an element with 'data-port-id' and data-node-id'\r\n      // e.toElement cannot be used because it may be a child element of the port\r\n      const portEl = e.path.find((el) => {\r\n        const toPortId = el.getAttribute && el.getAttribute('data-port-id')\r\n        const toNodeId = el.getAttribute && el.getAttribute('data-node-id')\r\n        return !!(toPortId && toNodeId)\r\n      })\r\n\r\n      // If both node-id and port-id are defined as data attributes, we are mouse-upping\r\n      // on another port. Run the success handler\r\n      if (portEl) {\r\n        const toPortId = portEl.getAttribute('data-port-id') as string\r\n        const toNodeId = portEl.getAttribute('data-node-id') as string\r\n        onLinkComplete({ linkId, startEvent, fromNodeId, fromPortId, toNodeId, toPortId })\r\n      } else {\r\n        onLinkCancel({ linkId, startEvent, fromNodeId, fromPortId })\r\n      }\r\n\r\n      // Remove the listeners if the link is complete or canceled\r\n      window.removeEventListener('mouseup', mouseUpHandler, false)\r\n      window.removeEventListener('mousemove', mouseMoveHandler, false)\r\n    }\r\n\r\n    // Add listeners\r\n    window.addEventListener('mouseup', mouseUpHandler, false)\r\n    window.addEventListener('mousemove', mouseMoveHandler, false)\r\n\r\n    // Notify state of link start\r\n    onLinkStart({ linkId, startEvent, fromNodeId, fromPortId })\r\n\r\n    // Prevent default and stop propagation to prevent text selection\r\n    startEvent.preventDefault()\r\n    startEvent.stopPropagation()\r\n  }\r\n  public render () {\r\n    const {\r\n      chart,\r\n      style,\r\n      port,\r\n      node,\r\n      Component = PortDefault,\r\n    } = this.props\r\n\r\n    const selectedLink = chart.selected.type === 'link' && chart.selected.id && chart.links[chart.selected.id]\r\n    const hoveredLink = chart.selected.type === 'link' && chart.selected.id && chart.links[chart.selected.id]\r\n\r\n    return (\r\n      <div\r\n        data-port-id={port.id}\r\n        data-node-id={node.id}\r\n        onMouseDown={this.onMouseDown}\r\n        ref={this.getNodRef}\r\n        style={style}\r\n      >\r\n        <Component\r\n          port={port}\r\n          isSelected={chart.selected.type === 'port' && chart.selected.id === port.id}\r\n          isHovered={chart.hovered.type === 'port' && chart.hovered.id === port.id}\r\n          isLinkSelected={ selectedLink\r\n            ? ((selectedLink.from.portId === port.id && selectedLink.from.nodeId === node.id) ||\r\n               (selectedLink.to.portId === port.id && selectedLink.to.nodeId === node.id))\r\n            : false\r\n          }\r\n          isLinkHovered={ hoveredLink\r\n            ? ((hoveredLink.from.portId === port.id && hoveredLink.from.nodeId === node.id) ||\r\n               (hoveredLink.to.portId === port.id && hoveredLink.to.nodeId === node.id))\r\n            : false\r\n          }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export * from './Port.default'\r\nexport * from './Port.wrapper'\r\n","import { filter } from 'lodash'\r\nimport * as React from 'react'\r\nimport { PortsGroupDefault } from '../../'\r\n\r\nexport interface IPortsDefaultProps {\r\n  children: any\r\n}\r\n\r\nexport const PortsDefault = ({ children }: IPortsDefaultProps) => {\r\n  return (\r\n    <div>\r\n      <PortsGroupDefault side=\"top\">\r\n        {filter(children, (child) => ['input', 'top'].includes(child.props.port.type))}\r\n      </PortsGroupDefault>\r\n      <PortsGroupDefault side=\"bottom\">\r\n        {filter(children, (child) => ['output', 'bottom'].includes(child.props.port.type))}\r\n      </PortsGroupDefault>\r\n      <PortsGroupDefault side=\"right\">\r\n        {filter(children, (child) => ['right'].includes(child.props.port.type))}\r\n      </PortsGroupDefault>\r\n      <PortsGroupDefault side=\"left\">\r\n        {filter(children, (child) => ['left'].includes(child.props.port.type))}\r\n      </PortsGroupDefault>\r\n    </div>\r\n  )\r\n}\r\n","export * from './Ports.default'\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport interface IPortsGroupDefaultProps {\r\n  side: 'top' | 'bottom' | 'left' | 'right'\r\n}\r\n\r\nexport const PortsGroupDefault = styled.div<IPortsGroupDefaultProps>`\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  ${(props) => {\r\n    if (props.side === 'top') {\r\n      return css`\r\n        width: 100%;\r\n        left: 0;\r\n        top: -12px;\r\n        flex-direction: row;\r\n        > div {\r\n          margin: 0 3px;\r\n        }\r\n      `\r\n    } else if (props.side === 'bottom') {\r\n      return css`\r\n        width: 100%;\r\n        left: 0;\r\n        bottom: -12px;\r\n        flex-direction: row;\r\n        > div {\r\n          margin: 0 3px;\r\n        }\r\n      `\r\n    } else if (props.side === 'left') {\r\n      return css`\r\n        height: 100%;\r\n        top: 0;\r\n        left: -12px;\r\n        flex-direction: column;\r\n        > div {\r\n          margin: 3px 0;\r\n        }\r\n      `\r\n    } else {\r\n      return css`\r\n        height: 100%;\r\n        top: 0;\r\n        right: -12px;\r\n        flex-direction: column;\r\n        > div {\r\n          margin: 3px 0;\r\n        }\r\n      `\r\n    }\r\n  }}\r\n`\r\n","export * from './PortsGroup.default'\r\n","export * from './Canvas'\nexport * from './Node'\nexport * from './NodeInner'\nexport * from './Port'\nexport * from './Ports'\nexport * from './PortsGroup'\nexport * from './Link'\nexport * from './FlowChart'\n","export const REACT_FLOW_CHART = 'react-flow-chart'\r\n","import { mapValues } from 'lodash'\r\nimport * as React from 'react'\r\nimport { FlowChart, IChart, IFlowChartComponents } from '../'\r\nimport * as actions from './actions'\r\n\r\nexport interface IFlowChartWithStateProps {\r\n  initialValue: IChart\r\n  Components?: IFlowChartComponents\r\n}\r\n\r\n/**\r\n * Flow Chart With State\r\n */\r\nexport class FlowChartWithState extends React.Component<IFlowChartWithStateProps, IChart> {\r\n  public state: IChart\r\n  constructor (props: IFlowChartWithStateProps) {\r\n    super(props)\r\n    this.state = props.initialValue\r\n  }\r\n  public render () {\r\n    const { Components } = this.props\r\n    const stateActions = mapValues(actions, (func: any) =>\r\n      (...args: any) => this.setState(func(...args))) as typeof actions\r\n\r\n    return (\r\n      <FlowChart\r\n        chart={this.state}\r\n        callbacks={stateActions}\r\n        Components={Components}\r\n      />\r\n    )\r\n  }\r\n}\r\n","import { forEach } from 'lodash'\nimport { v4 } from 'uuid'\nimport {\n  IChart, IOnCanvasClick, IOnCanvasDrop, IOnDeleteKey, IOnDragCanvas, IOnDragNode, IOnLinkCancel,\n  IOnLinkComplete, IOnLinkMouseEnter, IOnLinkMouseLeave, IOnLinkMove, IOnLinkStart, IOnNodeClick, IOnPortPositionChange,\n} from '../'\n\n/**\n * This file contains actions for updating state after each of the required callbacks\n */\n\nexport const onDragNode: IOnDragNode = (event, data, id) => (chart: IChart) => {\n  const nodechart = chart.nodes[id]\n  if (nodechart) {\n    nodechart.position = {\n      x: data.x,\n      y: data.y,\n    }\n  }\n  return chart\n}\n\nexport const onDragCanvas: IOnDragCanvas = (event, data) => (chart: IChart): IChart => {\n  chart.offset.x = data.x\n  chart.offset.y = data.y\n  return chart\n}\n\nexport const onLinkStart: IOnLinkStart = ({ linkId, fromNodeId, fromPortId }) => (chart: IChart): IChart => {\n  chart.links[linkId] = {\n    id: linkId,\n    from: {\n      nodeId: fromNodeId,\n      portId: fromPortId,\n    },\n    to: {},\n  }\n  return chart\n}\n\nexport const onLinkMove: IOnLinkMove = ({ linkId, toPosition }) => (chart: IChart): IChart => {\n  chart.links[linkId].to.position = toPosition\n  return chart\n}\n\nexport const onLinkComplete: IOnLinkComplete = ({ linkId, fromNodeId, toNodeId, toPortId }) =>\n  (chart: IChart): IChart => {\n    if (fromNodeId !== toPortId) {\n      chart.links[linkId].to = {\n        nodeId: toNodeId,\n        portId: toPortId,\n      }\n    }\n    return chart\n  }\n\nexport const onLinkCancel: IOnLinkCancel = ({ linkId }) => (chart: IChart) => {\n  delete chart.links[linkId]\n  return chart\n}\n\nexport const onLinkMouseEnter: IOnLinkMouseEnter = ({ linkId }) => (chart: IChart) => {\n  // Set the link to hover\n  const link = chart.links[linkId]\n  // Set the connected ports to hover\n  if (link.to.nodeId && link.to.portId) {\n    chart.hovered = {\n      type: 'link',\n      id: linkId,\n    }\n  }\n  return chart\n}\n\nexport const onLinkMouseLeave: IOnLinkMouseLeave = ({ linkId }) => (chart: IChart) => {\n  const link = chart.links[linkId]\n  // Set the connected ports to hover\n  if (link.to.nodeId && link.to.portId) {\n    chart.hovered = {}\n  }\n  return chart\n}\n\nexport const onLinkClick: IOnLinkMouseLeave = ({ linkId }) => (chart: IChart) => {\n  chart.selected = {\n    type: 'link',\n    id: linkId,\n  }\n  return chart\n}\n\nexport const onCanvasClick: IOnCanvasClick = () => (chart: IChart) => {\n  chart.selected = {}\n  return chart\n}\n\nexport const onDeleteKey: IOnDeleteKey = () => (chart: IChart) => {\n  if (chart.selected.type === 'node' && chart.selected.id) {\n    const node = chart.nodes[chart.selected.id]\n    // Delete the connected links\n    forEach(chart.links, (link) => {\n      if (link.from.nodeId === node.id || link.to.nodeId === node.id) {\n        delete chart.links[link.id]\n      }\n    })\n    // Delete the node\n    delete chart.nodes[chart.selected.id]\n  } else if (chart.selected.type === 'link' && chart.selected.id) {\n    delete chart.links[chart.selected.id]\n  }\n  chart.selected = {}\n  return chart\n}\n\nexport const onNodeClick: IOnNodeClick = ({ nodeId }) => (chart: IChart) => {\n  chart.selected = {\n    type: 'node',\n    id: nodeId,\n  }\n  return chart\n}\n\nexport const onPortPositionChange: IOnPortPositionChange = (nodeToUpdate, port, position) =>\n  (chart: IChart): IChart => {\n    chart.nodes[nodeToUpdate.id].ports[port.id].position = {\n      x: position.x,\n      y: position.y,\n    }\n    return chart\n  }\n\nexport const onCanvasDrop: IOnCanvasDrop = ({ data, position }) => (chart: IChart): IChart => {\n  const id = v4()\n  chart.nodes[id] = {\n    id,\n    position,\n    type: data.type,\n    ports: data.ports,\n    properties: data.properties,\n  }\n  return chart\n}\n","export * from './FlowChartWithState'\n","export * from './components'\r\nexport * from './container'\r\nexport * from './types'\r\nexport * from './constants'\r\n","var map = {\n\t\"./CustomCanvasOuter.tsx\": \"./stories/CustomCanvasOuter.tsx\",\n\t\"./CustomNode.tsx\": \"./stories/CustomNode.tsx\",\n\t\"./CustomNodeInner.tsx\": \"./stories/CustomNodeInner.tsx\",\n\t\"./CustomPort.tsx\": \"./stories/CustomPort.tsx\",\n\t\"./DragAndDropSidebar.tsx\": \"./stories/DragAndDropSidebar.tsx\",\n\t\"./ExternalReactState.tsx\": \"./stories/ExternalReactState.tsx\",\n\t\"./InternalReactState.tsx\": \"./stories/InternalReactState.tsx\",\n\t\"./SelectedSidebar.tsx\": \"./stories/SelectedSidebar.tsx\",\n\t\"./StressTest.tsx\": \"./stories/StressTest.tsx\",\n\t\"./components/Content.tsx\": \"./stories/components/Content.tsx\",\n\t\"./components/Page.tsx\": \"./stories/components/Page.tsx\",\n\t\"./components/Sidebar.tsx\": \"./stories/components/Sidebar.tsx\",\n\t\"./components/SidebarItem.tsx\": \"./stories/components/SidebarItem.tsx\",\n\t\"./components/index.ts\": \"./stories/components/index.ts\",\n\t\"./index.tsx\": \"./stories/index.tsx\",\n\t\"./misc/exampleChartState.ts\": \"./stories/misc/exampleChartState.ts\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./stories sync recursive \\\\.tsx?$\";","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState, ICanvasOuterDefaultProps } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst CanvasOuterCustom = styled.div<ICanvasOuterDefaultProps>`\n  position: relative;\n  background-size: 10px 10px;\n  background-color: #4f6791;\n  background-image:\n    linear-gradient(90deg,hsla(0,0%,100%,.1) 1px,transparent 0),\n    linear-gradient(180deg,hsla(0,0%,100%,.1) 1px,transparent 0);\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  cursor: not-allowed;\n` as any\n\nexport const CustomCanvasOuterDemo = () => {\n  return (\n    <Page>\n      <FlowChartWithState\n        initialValue={chartSimple}\n        Components={ {\n          CanvasOuter: CanvasOuterCustom,\n        }}\n      />\n    </Page>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState, INodeDefaultProps } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst DarkBox = styled.div`\n  position: absolute;\n  padding: 30px;\n  background: #3e3e3e;\n  color: white;\n  border-radius: 10px;\n`\n\nconst Circle = styled.div`\n  position: absolute;\n  width: 150px;\n  height: 150px;\n  padding: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #d30000;\n  color: white;\n  border-radius: 50%;\n`\n\n/**\n * Create the custom component,\n * Make sure it has the same prop signature\n * You'll need to add {...otherProps} so the event listeners are added to your component\n */\nconst NodeCustom = ({ node, children, ...otherProps }: INodeDefaultProps) => {\n  if (node.type === 'output-only') {\n    return (\n      <DarkBox {...otherProps}>\n        {children}\n      </DarkBox>\n    )\n  } else {\n    return (\n      <Circle {...otherProps}>\n        {children}\n      </Circle>\n    )\n  }\n}\n\nexport const CustomNodeDemo = () => {\n  return (\n    <Page>\n      <FlowChartWithState\n        initialValue={chartSimple}\n        Components={ {\n          Node: NodeCustom,\n        }}\n      />\n    </Page>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState, INodeInnerDefaultProps } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst Outer = styled.div`\n  padding: 30px;\n`\n\nconst Input = styled.input`\n  padding: 10px;\n  border: 1px solid cornflowerblue;\n  width: 100%;\n`\n\n/**\n * Create the custom component,\n * Make sure it has the same prop signature\n */\nconst NodeInnerCustom = ({ node }: INodeInnerDefaultProps) => {\n  if (node.type === 'output-only') {\n    return (\n      <Outer>\n        <p>Use Node inner to customise the content of the node</p>\n      </Outer>\n    )\n  } else {\n    return (\n      <Outer>\n        <p>Add custom displays for each node.type</p>\n        <p>You may need to stop event propagation so your forms work.</p>\n        <br />\n        <Input\n          placeholder=\"Add forms etc if required\"\n          onClick={(e) => e.stopPropagation()}\n          onMouseUp={(e) => e.stopPropagation()}\n          onMouseDown={(e) => e.stopPropagation()}\n        />\n      </Outer>\n    )\n  }\n}\n\nexport const CustomNodeInnerDemo = () => {\n  return (\n    <Page>\n      <FlowChartWithState\n        initialValue={chartSimple}\n        Components={ {\n          NodeInner: NodeInnerCustom,\n        }}\n      />\n    </Page>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState, IPortDefaultProps } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst PortDefaultOuter = styled.div`\n  width: 24px;\n  height: 24px;\n  background: cornflowerblue;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PortCustom = (props: IPortDefaultProps) => (\n  <PortDefaultOuter>\n    { props.port.properties && props.port.properties.value === 'yes' && (\n      <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\n        <path fill=\"white\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\" />\n      </svg>\n    )}\n    { props.port.properties && props.port.properties.value === 'no' && (\n      <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\n        <path fill=\"white\" d=\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\" />\n      </svg>\n    )}\n    { !props.port.properties && (\n      <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\n        <path fill=\"white\" d=\"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\" />\n      </svg>\n    )}\n  </PortDefaultOuter>\n)\n\nexport const CustomPortDemo = () => {\n  return (\n    <Page>\n      <FlowChartWithState\n        initialValue={chartSimple}\n        Components={ {\n          Port: PortCustom,\n        }}\n      />\n    </Page>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState } from '../src'\nimport { Content, Page, Sidebar, SidebarItem } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst Message = styled.div`\nmargin: 10px;\npadding: 10px;\nbackground: rgba(0,0,0,0.05);\n`\n\nexport const DragAndDropSidebar = () => (\n  <Page>\n    <Content>\n      <FlowChartWithState initialValue={chartSimple} />\n    </Content>\n    <Sidebar>\n      <Message>\n        Drag and drop these items onto the canvas.\n      </Message>\n      <SidebarItem\n        type=\"top/bottom\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'top',\n            properties: {\n              custom: 'property',\n            },\n          },\n          port2: {\n            id: 'port1',\n            type: 'bottom',\n            properties: {\n              custom: 'property',\n            },\n          },\n        } }\n        properties={ {\n          custom: 'property',\n        }}\n      />\n      <SidebarItem\n        type=\"bottom-only\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'bottom',\n            properties: {\n              custom: 'property',\n            },\n          },\n        }}\n      />\n      <SidebarItem\n        type=\"left-right\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'left',\n            properties: {\n              custom: 'property',\n            },\n          },\n          port2: {\n            id: 'port2',\n            type: 'right',\n            properties: {\n              custom: 'property',\n            },\n          },\n        }}\n      />\n      <SidebarItem\n        type=\"all-sides\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'left',\n\n          },\n          port2: {\n            id: 'port2',\n            type: 'right',\n          },\n          port3: {\n            id: 'port3',\n            type: 'top',\n          },\n          port4: {\n            id: 'port4',\n            type: 'bottom',\n          },\n        }}\n      />\n      <SidebarItem\n        type=\"lots-of-ports\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'left',\n\n          },\n          port2: {\n            id: 'port2',\n            type: 'right',\n          },\n          port3: {\n            id: 'port3',\n            type: 'top',\n          },\n          port4: {\n            id: 'port4',\n            type: 'bottom',\n          },\n          port5: {\n            id: 'port5',\n            type: 'left',\n          },\n          port6: {\n            id: 'port6',\n            type: 'right',\n          },\n          port7: {\n            id: 'port7',\n            type: 'top',\n          },\n          port8: {\n            id: 'port8',\n            type: 'bottom',\n          },\n          port9: {\n            id: 'port9',\n            type: 'left',\n          },\n          port10: {\n            id: 'port10',\n            type: 'right',\n          },\n          port11: {\n            id: 'port11',\n            type: 'top',\n          },\n          port12: {\n            id: 'port12',\n            type: 'bottom',\n          },\n        }}\n      />\n    </Sidebar>\n  </Page>\n)\n","import { cloneDeep, mapValues } from 'lodash'\nimport * as React from 'react'\nimport { FlowChart } from '../src'\nimport * as actions from '../src/container/actions'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\n/**\n * State is external to the <FlowChart> Element\n *\n * You could easily move this state it Redux or similar by creating your own callback actions\n */\nexport class ExternalReactState extends React.Component {\n  public state = cloneDeep(chartSimple)\n  public render () {\n    const chart = this.state\n    const stateActions = mapValues(actions, (func: any) =>\n      (...args: any) => this.setState(func(...args))) as typeof actions\n\n    return (\n      <Page>\n        <FlowChart\n          chart={chart}\n          callbacks={stateActions}\n        />\n      </Page>\n    )\n  }\n}\n","import * as React from 'react'\nimport { FlowChartWithState } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nexport const InternalReactState = () => {\n  return (\n    <Page>\n      <FlowChartWithState initialValue={chartSimple}/>\n    </Page>\n  )\n}\n","import { cloneDeep, mapValues } from 'lodash'\nimport * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChart } from '../src'\nimport * as actions from '../src/container/actions'\nimport { Content, Page, Sidebar } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst Message = styled.div`\n  margin: 10px;\n  padding: 10px;\n  line-height: 1.4em;\n`\n\nconst Button = styled.div`\n  padding: 10px 15px;\n  background: cornflowerblue;\n  color: white;\n  border-radius: 3px;\n  text-align: center;\n  transition: 0.3s ease all;\n  cursor: pointer;\n  &:hover {\n    box-shadow: 0 10px 20px rgba(0,0,0,.1);\n  }\n  &:active {\n    background: #5682d2;\n  }\n`\n\nexport class SelectedSidebar extends React.Component {\n  public state = cloneDeep(chartSimple)\n  public render () {\n    const chart = this.state\n    const stateActions = mapValues(actions, (func: any) =>\n      (...args: any) => this.setState(func(...args))) as typeof actions\n\n    return (\n      <Page>\n        <Content>\n          <FlowChart\n            chart={chart}\n            callbacks={stateActions}\n          />\n        </Content>\n        <Sidebar>\n          { chart.selected.type\n          ? <Message>\n              <div>Type: {chart.selected.type}</div>\n              <div>ID: {chart.selected.id}</div>\n              <br/>\n              {/*\n                We can re-use the onDeleteKey action. This will delete whatever is selected.\n                Otherwise, we have access to the state here so we can do whatever we want.\n              */}\n              <Button onClick={() => stateActions.onDeleteKey()}>Delete</Button>\n            </Message>\n          : <Message>Click on a Node, Port or Link</Message> }\n        </Sidebar>\n      </Page>\n    )\n  }\n}\n","import { compact, flatMap, flatten, keyBy, range } from 'lodash'\nimport * as React from 'react'\nimport { FlowChartWithState } from '../src'\nimport { Page } from './components'\n\nexport const StressTestDemo = () => {\n\n  const xyGrid = flatten(range(0, 1500, 300).map((x) => range(0, 1000, 150).map((y) => ({ x, y }))))\n\n  const chart = {\n    offset: {\n      x: 0,\n      y: 0,\n    },\n    nodes: keyBy(xyGrid.map(({ x, y }) => ({\n      id: `node-${x}-${y}`,\n      type: 'default',\n      position: { x: x + 100, y: y + 100 },\n      ports: {\n        port1: {\n          id: 'port1',\n          type: 'top',\n        },\n        port2: {\n          id: 'port2',\n          type: 'bottom',\n        },\n        port3: {\n          id: 'port3',\n          type: 'right',\n        },\n        port4: {\n          id: 'port4',\n          type: 'left',\n        },\n      },\n    })), 'id'),\n    links: keyBy(compact(flatMap(xyGrid, ({ x, y }, idx) => {\n      const next = xyGrid[idx + 1]\n      if (next) {\n        return [{\n          id: `link-${x}-${y}-a`,\n          from: {\n            nodeId: `node-${x}-${y}`,\n            portId: 'port2',\n          },\n          to: {\n            nodeId: `node-${next.x}-${next.y}`,\n            portId: 'port3',\n          },\n        }, {\n          id: `link-${x}-${y}-b`,\n          from: {\n            nodeId: `node-${x}-${y}`,\n            portId: 'port2',\n          },\n          to: {\n            nodeId: `node-${next.x}-${next.y}`,\n            portId: 'port4',\n          },\n        }]\n      }\n      return undefined\n    })), 'id') as any,\n    selected: {},\n    hovered: {},\n  }\n  return (\n    <Page>\n      <FlowChartWithState initialValue={chart} />\n    </Page>\n  )\n}\n","import styled from 'styled-components'\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n","import * as React from 'react'\r\nimport styled, { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0px;\r\n    max-width: 100vw;\r\n    max-height: 100vh;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n    font-family: sans-serif;\r\n  }\r\n\r\n  *, :after, :before {\r\n    box-sizing: inherit;\r\n  }\r\n`\r\n\r\nconst PageContent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1;\r\n  max-width: 100vw;\r\n  max-height: 100vh;\r\n`\r\n\r\nexport const Page = ({ children }: { children: any}) => (\r\n  <PageContent>\r\n    {children}\r\n    <GlobalStyle />\r\n  </PageContent>\r\n)\r\n","import styled from 'styled-components'\r\n\r\nexport const Sidebar = styled.div`\r\n  width: 300px;\r\n  background: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-shrink: 0;\r\n`\r\n","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport { INode, REACT_FLOW_CHART } from '../../src'\r\n\r\nconst Outer = styled.div`\r\n  padding: 20px 30px;\r\n  font-size: 14px;\r\n  background: white;\r\n  cursor: move;\r\n`\r\n\r\nexport interface ISidebarItemProps {\r\n  type: string,\r\n  ports: INode['ports'],\r\n  properties?: any,\r\n}\r\n\r\nexport const SidebarItem = ({ type, ports, properties }: ISidebarItemProps) => {\r\n  return (\r\n    <Outer\r\n      draggable={true}\r\n      onDragStart={ (event) => {\r\n        event.dataTransfer.setData(REACT_FLOW_CHART, JSON.stringify({ type, ports, properties }))\r\n      } }\r\n    >\r\n      {type}\r\n    </Outer>\r\n  )\r\n}\r\n","export * from './Content'\r\nexport * from './Page'\r\nexport * from './Sidebar'\r\nexport * from './SidebarItem'\r\n","import { storiesOf } from '@storybook/react'\r\nimport * as React from 'react'\r\nimport { CustomCanvasOuterDemo } from './CustomCanvasOuter'\r\nimport { CustomNodeDemo } from './CustomNode'\r\nimport { CustomNodeInnerDemo } from './CustomNodeInner'\r\nimport { CustomPortDemo } from './CustomPort'\r\nimport { DragAndDropSidebar } from './DragAndDropSidebar'\r\nimport { ExternalReactState } from './ExternalReactState'\r\nimport { InternalReactState } from './InternalReactState'\r\nimport { SelectedSidebar } from './SelectedSidebar'\r\nimport { StressTestDemo } from './StressTest'\r\n\r\nstoriesOf('State', module)\r\n  .add('Internal React State', InternalReactState)\r\n  .add('External React State', () => <ExternalReactState />)\r\n\r\nstoriesOf('Custom Components', module)\r\n  .add('Node', CustomNodeDemo)\r\n  .add('Node Inner', CustomNodeInnerDemo)\r\n  .add('Port', CustomPortDemo)\r\n  .add('Canvas Outer', CustomCanvasOuterDemo)\r\n\r\nstoriesOf('Stress Testing', module)\r\n  .add('default', StressTestDemo)\r\n\r\nstoriesOf('Sidebar', module)\r\n  .add('Drag and Drop', DragAndDropSidebar)\r\n  .add('Selected Sidebar', () => <SelectedSidebar />)\r\n","import { IChart } from '../../src'\r\n\r\nexport const chartSimple: IChart = {\r\n  offset: {\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  nodes: {\r\n    node1: {\r\n      id: 'node1',\r\n      type: 'output-only',\r\n      position: {\r\n        x: 300,\r\n        y: 100,\r\n      },\r\n      ports: {\r\n        port1: {\r\n          id: 'port1',\r\n          type: 'output',\r\n          properties: {\r\n            value: 'yes',\r\n          },\r\n        },\r\n        port2: {\r\n          id: 'port2',\r\n          type: 'output',\r\n          properties: {\r\n            value: 'no',\r\n          },\r\n        },\r\n      },\r\n    },\r\n    node2: {\r\n      id: 'node2',\r\n      type: 'input-output',\r\n      position: {\r\n        x: 300,\r\n        y: 300,\r\n      },\r\n      ports: {\r\n        port1: {\r\n          id: 'port1',\r\n          type: 'input',\r\n        },\r\n        port2: {\r\n          id: 'port2',\r\n          type: 'output',\r\n        },\r\n      },\r\n    },\r\n    node3: {\r\n      id: 'node3',\r\n      type: 'input-output',\r\n      position: {\r\n        x: 100,\r\n        y: 600,\r\n      },\r\n      ports: {\r\n        port1: {\r\n          id: 'port1',\r\n          type: 'input',\r\n        },\r\n        port2: {\r\n          id: 'port2',\r\n          type: 'output',\r\n        },\r\n      },\r\n    },\r\n    node4: {\r\n      id: 'node4',\r\n      type: 'input-output',\r\n      position: {\r\n        x: 500,\r\n        y: 600,\r\n      },\r\n      ports: {\r\n        port1: {\r\n          id: 'port1',\r\n          type: 'input',\r\n        },\r\n        port2: {\r\n          id: 'port2',\r\n          type: 'output',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  links: {\r\n    link1: {\r\n      id: 'link1',\r\n      from: {\r\n        nodeId: 'node1',\r\n        portId: 'port2',\r\n      },\r\n      to: {\r\n        nodeId: 'node2',\r\n        portId: 'port1',\r\n      },\r\n    },\r\n    link2: {\r\n      id: 'link2',\r\n      from: {\r\n        nodeId: 'node2',\r\n        portId: 'port2',\r\n      },\r\n      to: {\r\n        nodeId: 'node3',\r\n        portId: 'port1',\r\n      },\r\n    },\r\n    link3: {\r\n      id: 'link3',\r\n      from: {\r\n        nodeId: 'node2',\r\n        portId: 'port2',\r\n      },\r\n      to: {\r\n        nodeId: 'node4',\r\n        portId: 'port1',\r\n      },\r\n    },\r\n  },\r\n  selected: {},\r\n  hovered: {},\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAMA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AAkBA;AAAA;AAAA;;AA6CA;AA5CA;AACA;AAWA;AAEA;AAMA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAAA;AA7CA;;;;;;;;;;;;;;;;;;;ACpBA;AAYA;;;;;;;;;;;;;;;;;;;;ACZA;AAMA;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AAmDA;AAEA;AA2BA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AASA;AAQA;AACA;AAgBA;;;;;;;;;;;;;;;;;;AClIA;;;;;;;;;;;;;;;ACAA;AACA;AAaA;AACA;AASA;AAEA;AAEA;AAOA;AAOA;AAUA;AACA;AACA;AAEA;AAQA;;;;;;;;;;;;;;;AChEA;AAEA;AACA;AAWA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAYA;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACTA;AACA;;;;;;;;;;;;;;;;;;;ACDA;AAWA;AAUA;;;;;;;;;;;;;;;;ACrBA;AACA;AAEA;AAWA;AACA;AAOA;AAOA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAMA;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAOA;AAIA;AAAA;AACA;AAEA;;AAAA;AAGA;;;;;;;;;;;;;;;;;;;AClBA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAWA;AAcA;AAQA;AAAA;AAAA;AAEA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAKA;AAiBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAuCA;AAtCA;AACA;AAQA;AACA;AAEA;AAQA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AAAA;AAjHA;;;;;;;;;;;;;;;;;;ACvBA;AACA;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAMA;AAAA;AACA;AAEA;AAGA;AAGA;AAGA;AAKA;;;;;;;;;;;;;;;;;;ACzBA;;;;;;;;;;;;;;;;;;;ACAA;AAMA;AA+CA;AAzCA;AACA;AASA;AAAA;AACA;AASA;AAAA;AACA;AASA;AAAA;AACA;AASA;AACA;;;;;;;;;;;;;;;;;;;ACrDA;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAOA;;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AAAA;AAnBA;;;;;;;;;;;;;;;ACbA;AACA;AAMA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;;;;;;;;;;;;;;;;;ACnIA;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AAEA;AAGA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAaA;;;;AAIA;AANA;AAEA;;;;AAIA;AACA;AAAA;AACA;AACA;AAKA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAMA;;;AAGA;AALA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AAMA;AACA;AAEA;AAGA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;;AAeA;AAdA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEA;AAEA;AAMA;AACA;AAAA;AAhBA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAgBA;AAAA;AAAA;AAAA;AACA;;AA+BA;AA9BA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;;AAAA;AACA;;AAAA;AACA;AAKA;AAEA;AAIA;AACA;AAAA;AAhCA;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAuBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;ACxEA;AAEA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAeA;AAQA;AAAA;AAAA;AAEA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;AC1BA;AAEA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AAEA;AAaA;AAAA;AACA;AAIA;AACA;AAKA;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACzsourceRoot":""}