{"version":3,"file":"static/iframe.fa18d66c626f190dac76.bundle.js","sources":["webpack:///./config/storybook/config.js","webpack:///./src/components/Canvas/Canvas.wrapper.tsx","webpack:///./src/components/Canvas/CanvasInner.default.tsx","webpack:///./src/components/Canvas/CanvasOuter.default.tsx","webpack:///./src/components/Canvas/index.tsx","webpack:///./src/components/FlowChart/FlowChart.tsx","webpack:///./src/components/FlowChart/index.ts","webpack:///./src/components/Link/Link.default.tsx","webpack:///./src/components/Link/Link.wrapper.tsx","webpack:///./src/components/Link/index.ts","webpack:///./src/components/Link/utils/generateCurvePath.ts","webpack:///./src/components/Link/utils/getLinkPosition.ts","webpack:///./src/components/Link/utils/index.ts","webpack:///./src/components/Node/Node.default.tsx","webpack:///./src/components/Node/Node.wrapper.tsx","webpack:///./src/components/Node/index.ts","webpack:///./src/components/NodeInner/NodeInner.default.tsx","webpack:///./src/components/NodeInner/index.ts","webpack:///./src/components/Port/Port.default.tsx","webpack:///./src/components/Port/Port.wrapper.tsx","webpack:///./src/components/Port/index.ts","webpack:///./src/components/Ports/Ports.default.tsx","webpack:///./src/components/Ports/index.ts","webpack:///./src/components/PortsGroup/PortsGroup.default.tsx","webpack:///./src/components/PortsGroup/index.ts","webpack:///./src/components/index.ts","webpack:///./src/constants.ts","webpack:///./src/container/FlowChartWithState.tsx","webpack:///./src/container/actions.ts","webpack:///./src/container/index.ts","webpack:///./src/container/utils/mapValues.ts","webpack:///./src/index.ts","webpack:///./stories sync \\.tsx","webpack:///./stories/CustomCanvasOuter.tsx","webpack:///./stories/CustomNode.tsx","webpack:///./stories/CustomNodeInner.tsx","webpack:///./stories/CustomPort.tsx","webpack:///./stories/DragAndDropSidebar.tsx","webpack:///./stories/ExternalReactState.tsx","webpack:///./stories/InternalReactState.tsx","webpack:///./stories/SelectedSidebar.tsx","webpack:///./stories/StressTest.tsx","webpack:///./stories/components/Content.tsx","webpack:///./stories/components/Page.tsx","webpack:///./stories/components/Sidebar.tsx","webpack:///./stories/components/SidebarItem.tsx","webpack:///./stories/components/index.ts","webpack:///./stories/index.tsx","webpack:///./stories/misc/exampleChartState.ts"],"sourcesContent":["import { setOptions } from \"@storybook/addon-options\"\nimport { configure } from \"@storybook/react\"\n// import { configureViewport, INITIAL_VIEWPORTS } from \"@storybook/addon-viewport\"\n\nsetOptions({\n\thierarchySeparator: /\\/|\\./,\n\thierarchyRootSeparator: /\\|/,\n})\n\n// configureViewport({\n// \tviewports: {\n// \t\t...INITIAL_VIEWPORTS\n// \t}\n// })\n\nfunction requireAll(requireContext) {\n\treturn requireContext.keys().map(requireContext);\n}\n\nfunction loadStories() {\n\trequireAll(require.context(\"../../stories\", true, /\\.tsx?$/));\n}\n\nconfigure(loadStories, module);","import * as React from 'react'\nimport Draggable from 'react-draggable'\nimport { IOnCanvasClick, IOnCanvasDrop, IOnDeleteKey, IOnDragCanvas, REACT_FLOW_CHART } from '../../'\nimport { ICanvasInnerDefaultProps } from './CanvasInner.default'\nimport { ICanvasOuterDefaultProps } from './CanvasOuter.default'\n\nexport interface ICanvasWrapperProps {\n  position: {\n    x: number\n    y: number,\n  }\n  onDragCanvas: IOnDragCanvas\n  onDeleteKey: IOnDeleteKey\n  onCanvasClick: IOnCanvasClick\n  onCanvasDrop: IOnCanvasDrop\n  ComponentInner: React.SFC<ICanvasInnerDefaultProps>\n  ComponentOuter: React.SFC<ICanvasOuterDefaultProps>\n  children: any\n}\n\nexport class CanvasWrapper extends React.Component<ICanvasWrapperProps> {\n  public render () {\n    const {\n      ComponentInner,\n      ComponentOuter,\n      position,\n      onDragCanvas,\n      children,\n      onCanvasClick,\n      onDeleteKey,\n      onCanvasDrop,\n    } = this.props\n\n    return (\n      <ComponentOuter>\n        <Draggable\n          axis=\"both\"\n          position={position}\n          grid={[1, 1]}\n          onDrag={(e, dragData) => onDragCanvas(e, dragData)}\n        >\n          <ComponentInner\n            children={children}\n            onClick={onCanvasClick}\n            tabIndex={0}\n            onKeyDown={ (e: React.KeyboardEvent) => {\n              if (e.keyCode === 46) {\n                onDeleteKey()\n              }\n            }}\n            onDrop={ (e) => {\n              const data = JSON.parse(e.dataTransfer.getData(REACT_FLOW_CHART))\n              onCanvasDrop({ data, position: {\n                x: e.clientX - position.x,\n                y: e.clientY - position.y,\n              }})\n            } }\n            onDragOver={ (e) => {\n              e.preventDefault()\n            } }\n          />\n        </Draggable>\n      </ComponentOuter>\n    )\n  }\n}\n","import styled from 'styled-components'\nimport { IOnCanvasClick } from '../../'\n\nexport interface ICanvasInnerDefaultProps {\n  children: any\n  onClick: IOnCanvasClick\n  tabIndex: number\n  onKeyDown: (e: React.KeyboardEvent) => void\n  onDrop: (e: React.DragEvent<HTMLDivElement>) => void\n  onDragOver: (e: React.DragEvent<HTMLDivElement>) => void\n}\n\nexport const CanvasInnerDefault = styled.div<ICanvasInnerDefaultProps>`\n  position: relative;\n  outline: 1px dashed rgba(0,0,0,0.1);\n  width: 10000px;\n  height: 10000px;\n  cursor: move;\n` as any\n","import styled from 'styled-components'\n\nexport interface ICanvasOuterDefaultProps {\n  children: any\n}\n\nexport const CanvasOuterDefault = styled.div<ICanvasOuterDefaultProps>`\n  position: relative;\n  background-size: 20px 20px;\n  background-color: rgba(0,0,0,0.08);\n  background-image:\n    linear-gradient(90deg,hsla(0,0%,100%,.2) 1px,transparent 0),\n    linear-gradient(180deg,hsla(0,0%,100%,.2) 1px,transparent 0);\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  cursor: not-allowed;\n` as any\n","export * from './CanvasInner.default'\nexport * from './CanvasOuter.default'\nexport * from './Canvas.wrapper'\n","import * as React from 'react'\nimport {\n  CanvasInnerDefault, CanvasOuterDefault, CanvasWrapper, ICanvasInnerDefaultProps, ICanvasOuterDefaultProps, IChart, ILinkDefaultProps,\n  INodeDefaultProps, INodeInnerDefaultProps, IOnCanvasClick, IOnCanvasDrop, IOnDeleteKey, IOnDragCanvas, IOnDragNode,\n  IOnLinkCancel, IOnLinkClick, IOnLinkComplete, IOnLinkMouseEnter, IOnLinkMouseLeave, IOnLinkMove,\n  IOnLinkStart, IOnNodeClick, IOnPortPositionChange, IPortDefaultProps, IPortsDefaultProps, LinkDefault, LinkWrapper,\n  NodeDefault, NodeInnerDefault, NodeWrapper, PortDefault, PortsDefault, PortWrapper, INode, IPosition, ISelectedOrHovered, ILink\n} from '../../'\n\nexport interface IFlowChartCallbacks {\n  onDragNode: IOnDragNode\n  onDragCanvas: IOnDragCanvas\n  onCanvasDrop: IOnCanvasDrop\n  onLinkStart: IOnLinkStart\n  onLinkMove: IOnLinkMove\n  onLinkComplete: IOnLinkComplete\n  onLinkCancel: IOnLinkCancel\n  onPortPositionChange: IOnPortPositionChange\n  onLinkMouseEnter: IOnLinkMouseEnter\n  onLinkMouseLeave: IOnLinkMouseLeave\n  onLinkClick: IOnLinkClick\n  onCanvasClick: IOnCanvasClick\n  onDeleteKey: IOnDeleteKey\n  onNodeClick: IOnNodeClick\n}\n\nexport interface IFlowChartComponents {\n  CanvasOuter?: React.SFC<ICanvasOuterDefaultProps>\n  CanvasInner?: React.SFC<ICanvasInnerDefaultProps>\n  NodeInner?: React.SFC<INodeInnerDefaultProps>\n  Ports?: React.SFC<IPortsDefaultProps>\n  Port?: React.SFC<IPortDefaultProps>\n  Node?: React.SFC<INodeDefaultProps>\n  Link?: React.SFC<ILinkDefaultProps>\n}\n\nexport interface IFlowChartProps {\n  /**\n   * The current chart state\n   */\n  chart: IChart\n  /**\n   * Callbacks for updating chart state.\n   * See container/actions.ts for example state mutations\n   */\n  callbacks: IFlowChartCallbacks\n  /**\n   * Custom components\n   */\n  Components?: IFlowChartComponents\n}\n\nexport const FlowChart = (props: IFlowChartProps) => {\n  const {\n    chart,\n    callbacks: {\n      onDragNode,\n      onDragCanvas,\n      onCanvasDrop,\n      onLinkStart,\n      onLinkMove,\n      onLinkComplete,\n      onLinkCancel,\n      onPortPositionChange,\n      onLinkMouseEnter,\n      onLinkMouseLeave,\n      onLinkClick,\n      onCanvasClick,\n      onDeleteKey,\n      onNodeClick,\n    },\n    Components: {\n      CanvasOuter = CanvasOuterDefault,\n      CanvasInner = CanvasInnerDefault,\n      NodeInner = NodeInnerDefault,\n      Ports = PortsDefault,\n      Port = PortDefault,\n      Node = NodeDefault,\n      Link = LinkDefault,\n    } = {},\n  } = props\n  const { links, nodes, selected, hovered } = chart\n\n  const canvasCallbacks = { onDragCanvas, onCanvasClick, onDeleteKey, onCanvasDrop }\n  const linkCallbacks = { onLinkMouseEnter, onLinkMouseLeave, onLinkClick }\n  const nodeCallbacks = { onDragNode, onNodeClick }\n  const portCallbacks = { onPortPositionChange, onLinkStart, onLinkMove, onLinkComplete, onLinkCancel }\n\n  return (\n    <CanvasWrapper\n      position={chart.offset}\n      ComponentInner={CanvasInner}\n      ComponentOuter={CanvasOuter}\n      {...canvasCallbacks}\n    >\n      { Object.keys(links).map((linkId) => {\n        const isSelected = selected.type === 'link' && selected.id === linkId\n        const isHovered = hovered.type === 'link' && hovered.id === linkId\n        const fromNodeId = links[linkId].from.nodeId\n        const toNodeId = links[linkId].to.nodeId\n\n        return (\n          <LinkWrapper\n            key={linkId}\n            link={links[linkId]}\n            Component={Link}\n            isSelected={isSelected}\n            isHovered={isHovered}\n            fromNode={nodes[fromNodeId]}\n            toNode={toNodeId ? nodes[toNodeId] : undefined}\n            {...linkCallbacks}\n          />\n        )\n      })}\n      { Object.keys(nodes).map((nodeId) => {\n        const isSelected = selected.type === 'node' && selected.id === nodeId\n        const selectedLink = getSelectedLinkForNode(selected, nodeId, links)\n        const hoveredLink = getSelectedLinkForNode(hovered, nodeId, links)\n\n        return (\n          <NodeWrapperWithChildren\n            key={nodeId}\n            Component={Node}\n            node={nodes[nodeId]}\n            offset={chart.offset}\n            isSelected={isSelected}\n            selected={selectedLink ? selected : undefined}\n            hovered={hoveredLink ? hovered : undefined}\n            selectedLink={selectedLink}\n            hoveredLink={hoveredLink}\n            NodeInner={NodeInner}\n            Ports={Ports}\n            Port={Port}\n            {...nodeCallbacks}\n            {...portCallbacks}\n          />\n        )\n      })\n    }\n    </CanvasWrapper>\n  )\n}\n\nconst getSelectedLinkForNode = (selected: ISelectedOrHovered, nodeId: string, links: IChart['links']) => {\n  const link = selected.type === 'link' && selected.id ? links[selected.id] : undefined\n\n  if (link && (link.from.nodeId === nodeId || link.to.nodeId === nodeId)) {\n    return link\n  }\n\n  return undefined\n}\n\nconst NodeWrapperWithChildren = React.memo((props: {\n  node: INode\n  Component: React.SFC<INodeDefaultProps>\n  offset: IPosition\n  selected: ISelectedOrHovered | undefined\n  hovered: ISelectedOrHovered | undefined\n  selectedLink: ILink | undefined\n  hoveredLink: ILink | undefined\n  isSelected: boolean\n  NodeInner: React.SFC<INodeInnerDefaultProps>\n  Ports: React.SFC<IPortsDefaultProps>\n  Port: React.SFC<IPortDefaultProps>\n  onPortPositionChange: IOnPortPositionChange\n  onLinkStart: IOnLinkStart\n  onLinkMove: IOnLinkMove\n  onLinkComplete: IOnLinkComplete\n  onLinkCancel: IOnLinkCancel;\n  onDragNode: IOnDragNode\n  onNodeClick: IOnNodeClick\n}) => {\n  const { node, offset, isSelected, selected, selectedLink, hovered, hoveredLink, NodeInner, Ports, Port, onDragNode, onNodeClick, Component, ...portCallbacks } = props\n  return (\n  <NodeWrapper\n    node={node}\n    isSelected={isSelected}\n    Component={Component}\n    onDragNode={onDragNode}\n    onNodeClick={onNodeClick}\n  >\n    <NodeInner node={node}/>\n    <Ports>\n      { Object.keys(node.ports).map((portId) => (\n        <PortWrapper\n          key={portId}\n          offset={offset}\n          selected={selected}\n          selectedLink={selectedLink}\n          hoveredLink={hoveredLink}\n          hovered={hovered}\n          node={node}\n          port={node.ports[portId]}\n          Component={Port}\n          {...portCallbacks}\n        />\n      )) }\n    </Ports>\n  </NodeWrapper>\n)\n})\n","export * from './FlowChart'\n","import * as React from 'react'\nimport { generateCurvePath, ILink, IOnLinkClick, IOnLinkMouseEnter, IOnLinkMouseLeave, IPosition } from '../../'\n\nexport interface ILinkDefaultProps {\n  link: ILink\n  startPos: IPosition\n  endPos: IPosition\n  onLinkMouseEnter: IOnLinkMouseEnter\n  onLinkMouseLeave: IOnLinkMouseLeave\n  onLinkClick: IOnLinkClick\n  isHovered: boolean\n  isSelected: boolean\n}\n\nexport const LinkDefault = ({\n  link,\n  startPos,\n  endPos,\n  onLinkMouseEnter,\n  onLinkMouseLeave,\n  onLinkClick,\n  isHovered,\n  isSelected,\n}: ILinkDefaultProps) => {\n  const points = generateCurvePath(startPos, endPos)\n\n  return (\n    <svg style={{ overflow: 'visible', position: 'absolute', cursor: 'pointer', left: 0, right: 0 }}>\n      <circle\n        r=\"4\"\n        cx={startPos.x}\n        cy={startPos.y}\n        fill=\"cornflowerblue\"\n      />\n      {/* Main line */}\n      <path\n        d={points}\n        stroke=\"cornflowerblue\"\n        strokeWidth=\"3\"\n        fill=\"none\"\n      />\n      {/* Thick line to make selection easier */}\n      <path\n        d={points}\n        stroke=\"cornflowerblue\"\n        strokeWidth=\"20\"\n        fill=\"none\"\n        strokeLinecap=\"round\"\n        strokeOpacity={(isHovered || isSelected) ? 0.1 : 0}\n        onMouseEnter={() => onLinkMouseEnter({ linkId: link.id })}\n        onMouseLeave={() => onLinkMouseLeave({ linkId: link.id })}\n        onClick={(e) => {\n          onLinkClick({ linkId: link.id })\n          e.stopPropagation()\n        } }\n      />\n      <circle\n        r=\"4\"\n        cx={endPos.x}\n        cy={endPos.y}\n        fill=\"cornflowerblue\"\n      />\n    </svg>\n  )\n}\n","import * as React from 'react'\nimport { INode, ILink, IOnLinkMouseEnter, IOnLinkMouseLeave } from '../../'\nimport { ILinkDefaultProps, LinkDefault } from './Link.default'\nimport { getLinkPosition } from './utils'\n\nexport interface ILinkWrapperProps {\n  link: ILink\n  isSelected: boolean\n  isHovered: boolean\n  fromNode: INode\n  toNode: INode | undefined\n  onLinkMouseEnter: IOnLinkMouseEnter\n  onLinkMouseLeave: IOnLinkMouseLeave\n  onLinkClick: IOnLinkMouseLeave\n  Component?: React.SFC<ILinkDefaultProps>\n}\n\nexport const LinkWrapper = React.memo(({\n  Component = LinkDefault,\n  link,\n  onLinkMouseEnter,\n  onLinkMouseLeave,\n  onLinkClick,\n  isSelected,\n  isHovered,\n  fromNode,\n  toNode\n}: ILinkWrapperProps) => {\n  const startPos = getLinkPosition(fromNode, link.from.portId)\n\n  const endPos = toNode && link.to.portId\n    ? getLinkPosition(toNode, link.to.portId)\n    : link.to.position\n\n  // Don't render the link yet if there is no end pos\n  // This will occur if the link was just created\n  if (!endPos) {\n    return null\n  }\n\n  return (\n    <Component\n      link={link}\n      startPos={startPos}\n      endPos={endPos}\n      onLinkMouseEnter={onLinkMouseEnter}\n      onLinkMouseLeave={onLinkMouseLeave}\n      onLinkClick={onLinkClick}\n      isSelected={isSelected}\n      isHovered={isHovered}\n    />\n  )\n})\n","export * from './Link.default'\nexport * from './Link.wrapper'\nexport * from './utils'\n","import { IPosition } from '../../../'\n\nexport const generateCurvePath = (startPos: IPosition, endPos: IPosition): string => {\n  const width = Math.abs(startPos.x - endPos.x)\n  const height = Math.abs(startPos.y - endPos.y)\n  const leftToRight = startPos.x < endPos.x\n  const topToBottom = startPos.y < endPos.y\n  const isHorizontal = width > height\n\n  let start\n  let end\n  if (isHorizontal) {\n    start = leftToRight ? startPos : endPos\n    end = leftToRight ? endPos : startPos\n  } else {\n    start = topToBottom ? startPos : endPos\n    end = topToBottom ? endPos : startPos\n  }\n\n  const curve = isHorizontal ? width / 3 : height / 3\n  const curveX = isHorizontal ? curve : 0\n  const curveY = isHorizontal ? 0 : curve\n\n  return `M${start.x},${start.y} C ${start.x + curveX},${start.y + curveY} ${end.x - curveX},${end.y - curveY} ${end.x},${end.y}`\n}\n","import { INode, IPosition } from '../../../'\n\nexport const getLinkPosition = (node: INode, portId: string): IPosition => {\n  const port = node.ports[portId]\n  return {\n    x: node.position.x + (port.position ? port.position.x : 0),\n    y: node.position.y + (port.position ? port.position.y : 0),\n  }\n}\n","export * from './getLinkPosition'\nexport * from './generateCurvePath'\n","import styled, { css } from 'styled-components'\nimport { INode } from '../../'\n\nexport interface INodeDefaultProps {\n  node: INode\n  children: any\n  isSelected: boolean\n  onClick: (e: React.MouseEvent) => void\n  style?: object\n}\n\nexport const NodeDefault = styled.div<INodeDefaultProps>`\n  position: absolute;\n  transition: 0.3s ease box-shadow, 0.3s ease margin-top;\n  background: white;\n  border-radius: 4px;\n  min-width: 200px;\n  ${(props) => props.isSelected && css`\n    box-shadow: 0 10px 20px rgba(0,0,0,.1);\n    margin-top: -2px\n    `\n  }\n` as any\n","import * as React from 'react'\nimport Draggable from 'react-draggable'\nimport { INode, IOnDragNode, IOnNodeClick } from '../../'\nimport { INodeDefaultProps, NodeDefault } from './Node.default'\n\nexport interface INodeWrapperProps {\n  node: INode\n  onDragNode: IOnDragNode\n  onNodeClick: IOnNodeClick\n  children: any\n  isSelected: boolean\n  Component?: React.SFC<INodeDefaultProps>\n}\n\nexport const NodeWrapper = ({\n  node,\n  onDragNode,\n  children,\n  onNodeClick,\n  isSelected,\n  Component = NodeDefault,\n}: INodeWrapperProps) => {\n  return (\n    <Draggable\n      bounds=\"parent\"\n      axis=\"both\"\n      position={node.position}\n      grid={[1,1]}\n      onStart={ (e) => {\n        // Stop propagation so the canvas does not move\n        e.stopPropagation()\n      }}\n      onDrag={(e, dragData) => onDragNode(e, dragData, node.id)}\n    >\n      <Component\n        children={children}\n        onClick={(e) => {\n          onNodeClick({ nodeId: node.id })\n          e.stopPropagation()\n        }}\n        isSelected={isSelected}\n        node={node}\n      />\n    </Draggable>\n  )\n}\n","export * from './Node.default'\nexport * from './Node.wrapper'\nexport * from './Node.default'\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { INode } from '../../'\n\nexport interface INodeInnerDefaultProps {\n  node: INode\n}\n\nconst Outer = styled.div`\n  padding: 40px 30px;\n`\n\nexport const NodeInnerDefault = ({ node }: INodeInnerDefaultProps) => {\n  return (\n    <Outer>\n      <div>Type: {node.type}</div>\n    </Outer>\n  )\n}\n","export * from './NodeInner.default'\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { IPort } from '../../'\n\nexport interface IPortDefaultProps {\n  port: IPort\n  isSelected: boolean\n  isHovered: boolean\n  isLinkSelected: boolean\n  isLinkHovered: boolean\n}\n\nconst PortDefaultOuter = styled.div`\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  background: white;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:hover > div {\n    background: cornflowerblue;\n  }\n`\n\nconst PortDefaultInner = styled.div<{ active: boolean }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background:  ${(props) => props.active ? 'cornflowerblue' : 'grey' };\n  cursor: pointer;\n`\n\nexport const PortDefault = ({ isLinkSelected, isLinkHovered }: IPortDefaultProps) => (\n  <PortDefaultOuter>\n    <PortDefaultInner\n      active={isLinkSelected || isLinkHovered}\n    />\n  </PortDefaultOuter>\n)\n","import * as React from 'react'\nimport { v4 } from 'uuid'\nimport {\n  IPosition, ISelectedOrHovered, INode, IOnLinkCancel, IOnLinkComplete, IOnLinkMove,\n   IOnLinkStart, IOnPortPositionChange, IPort, ILink\n} from '../../'\nimport { IPortDefaultProps, PortDefault } from './Port.default'\n\n/** Construct the composed path by traversing parentElements */\nconst composedPath = (el: HTMLElement | null) => {\n  const path: HTMLElement[] = []\n  while (el) {\n    path.push(el)\n    el = el.parentElement\n  }\n  return path\n}\n\nexport interface IPortWrapperProps {\n  style?: object\n  offset: IPosition\n  selected: ISelectedOrHovered | undefined\n  hovered: ISelectedOrHovered | undefined\n  selectedLink: ILink | undefined\n  hoveredLink: ILink | undefined\n  port: IPort\n  node: INode\n  onPortPositionChange: IOnPortPositionChange\n  Component: React.SFC<IPortDefaultProps>\n\n  // Link handlers\n  onLinkStart: IOnLinkStart\n  onLinkMove: IOnLinkMove\n  onLinkCancel: IOnLinkCancel\n  onLinkComplete: IOnLinkComplete\n}\n\nexport class PortWrapper extends React.Component<IPortWrapperProps> {\n  public nodeRef?: HTMLDivElement\n  public getNodRef = (el: HTMLDivElement) => {\n    if (el) {\n      const { node, port, onPortPositionChange } = this.props\n      this.nodeRef = el\n\n      // Ports component should be positions absolute\n      // Factor this in so we get position relative to the node\n      const nodesEl = el.parentElement\n        ? el.parentElement\n        : { offsetLeft: 0, offsetTop: 0 }\n\n      const position = {\n        x: el.offsetLeft + nodesEl.offsetLeft + el.offsetWidth / 2,\n        y: el.offsetTop + nodesEl.offsetTop + el.offsetHeight / 2,\n      }\n      onPortPositionChange(node, port, position)\n    }\n  }\n  public onMouseDown = (startEvent: any) => {\n    const { offset, node, port, onLinkStart, onLinkCancel, onLinkComplete, onLinkMove } = this.props\n    const linkId = v4()\n    const fromNodeId = node.id\n    const fromPortId = port.id\n\n    // Create the move handler\n    // This will update the position as the mouse moves\n    const mouseMoveHandler = (e: MouseEvent) => {\n      onLinkMove({\n        linkId, startEvent, fromNodeId, fromPortId,\n        toPosition: {\n          x: e.clientX - offset.x,\n          y: e.clientY - offset.y,\n        },\n      })\n    }\n\n    // Create and bind the mouse up handler\n    // This is used to check if the link is complete or cancelled\n    const mouseUpHandler = (e: MouseEvent) => {\n\n      // We traverse up the event path until we find an element with 'data-port-id' and data-node-id'\n      // e.toElement cannot be used because it may be a child element of the port\n      const path = composedPath(e.target as HTMLElement)\n      const portEl = path.find((el) => {\n        const toPortId = el.getAttribute && el.getAttribute('data-port-id')\n        const toNodeId = el.getAttribute && el.getAttribute('data-node-id')\n        return !!(toPortId && toNodeId)\n      })\n\n      // If both node-id and port-id are defined as data attributes, we are mouse-upping\n      // on another port. Run the success handler\n      if (portEl) {\n        const toPortId = portEl.getAttribute('data-port-id') as string\n        const toNodeId = portEl.getAttribute('data-node-id') as string\n        onLinkComplete({ linkId, startEvent, fromNodeId, fromPortId, toNodeId, toPortId })\n      } else {\n        onLinkCancel({ linkId, startEvent, fromNodeId, fromPortId })\n      }\n\n      // Remove the listeners if the link is complete or canceled\n      window.removeEventListener('mouseup', mouseUpHandler, false)\n      window.removeEventListener('mousemove', mouseMoveHandler, false)\n    }\n\n    // Add listeners\n    window.addEventListener('mouseup', mouseUpHandler, false)\n    window.addEventListener('mousemove', mouseMoveHandler, false)\n\n    // Notify state of link start\n    onLinkStart({ linkId, startEvent, fromNodeId, fromPortId })\n\n    // Prevent default and stop propagation to prevent text selection\n    startEvent.preventDefault()\n    startEvent.stopPropagation()\n  }\n  public render () {\n    const {\n      selected,\n      selectedLink,\n      hovered,\n      hoveredLink,\n      style,\n      port,\n      node,\n      Component = PortDefault,\n    } = this.props\n\n    return (\n      <div\n        data-port-id={port.id}\n        data-node-id={node.id}\n        onMouseDown={this.onMouseDown}\n        ref={this.getNodRef}\n        style={style}\n      >\n        <Component\n          port={port}\n          isSelected={!!selected && selected.type === 'port' && selected.id === port.id}\n          isHovered={!!hovered && hovered.type === 'port' && hovered.id === port.id}\n          isLinkSelected={ selectedLink\n            ? ((selectedLink.from.portId === port.id && selectedLink.from.nodeId === node.id) ||\n               (selectedLink.to.portId === port.id && selectedLink.to.nodeId === node.id))\n            : false\n          }\n          isLinkHovered={ hoveredLink\n            ? ((hoveredLink.from.portId === port.id && hoveredLink.from.nodeId === node.id) ||\n               (hoveredLink.to.portId === port.id && hoveredLink.to.nodeId === node.id))\n            : false\n          }\n        />\n      </div>\n    )\n  }\n}\n","export * from './Port.default'\nexport * from './Port.wrapper'\n","import * as React from 'react'\nimport { PortsGroupDefault } from '../../'\n\nexport interface IPortsDefaultProps {\n  children: Array<React.ReactElement<any>>\n}\n\nexport const PortsDefault = ({ children }: IPortsDefaultProps) => {\n  return (\n    <div>\n      <PortsGroupDefault side=\"top\">\n        {children.filter((child) => ['input', 'top'].includes(child.props.port.type))}\n      </PortsGroupDefault>\n      <PortsGroupDefault side=\"bottom\">\n        {children.filter((child) => ['output', 'bottom'].includes(child.props.port.type))}\n      </PortsGroupDefault>\n      <PortsGroupDefault side=\"right\">\n        {children.filter((child) => ['right'].includes(child.props.port.type))}\n      </PortsGroupDefault>\n      <PortsGroupDefault side=\"left\">\n        {children.filter((child) => ['left'].includes(child.props.port.type))}\n      </PortsGroupDefault>\n    </div>\n  )\n}\n","export * from './Ports.default'\n","import styled, { css } from 'styled-components'\n\nexport interface IPortsGroupDefaultProps {\n  side: 'top' | 'bottom' | 'left' | 'right'\n}\n\nexport const PortsGroupDefault = styled.div<IPortsGroupDefaultProps>`\n  position: absolute;\n  display: flex;\n  justify-content: center;\n\n  ${(props) => {\n    if (props.side === 'top') {\n      return css`\n        width: 100%;\n        left: 0;\n        top: -12px;\n        flex-direction: row;\n        > div {\n          margin: 0 3px;\n        }\n      `\n    } else if (props.side === 'bottom') {\n      return css`\n        width: 100%;\n        left: 0;\n        bottom: -12px;\n        flex-direction: row;\n        > div {\n          margin: 0 3px;\n        }\n      `\n    } else if (props.side === 'left') {\n      return css`\n        height: 100%;\n        top: 0;\n        left: -12px;\n        flex-direction: column;\n        > div {\n          margin: 3px 0;\n        }\n      `\n    } else {\n      return css`\n        height: 100%;\n        top: 0;\n        right: -12px;\n        flex-direction: column;\n        > div {\n          margin: 3px 0;\n        }\n      `\n    }\n  }}\n`\n","export * from './PortsGroup.default'\n","export * from './Canvas'\nexport * from './Node'\nexport * from './NodeInner'\nexport * from './Port'\nexport * from './Ports'\nexport * from './PortsGroup'\nexport * from './Link'\nexport * from './FlowChart'\n","export const REACT_FLOW_CHART = 'react-flow-chart'\n","import * as React from 'react'\nimport { FlowChart, IChart, IFlowChartComponents } from '../'\nimport * as actions from './actions'\nimport mapValues from './utils/mapValues'\n\nexport interface IFlowChartWithStateProps {\n  initialValue: IChart\n  Components?: IFlowChartComponents\n}\n\n/**\n * Flow Chart With State\n */\nexport class FlowChartWithState extends React.Component<IFlowChartWithStateProps, IChart> {\n  public state: IChart\n  private stateActions = mapValues(actions, (func: any) =>\n      (...args: any) => this.setState(func(...args)))\n\n  constructor (props: IFlowChartWithStateProps) {\n    super(props)\n    this.state = props.initialValue\n  }\n  public render () {\n    const { Components } = this.props\n\n    return (\n      <FlowChart\n        chart={this.state}\n        callbacks={this.stateActions}\n        Components={Components}\n      />\n    )\n  }\n}\n","import { v4 } from 'uuid'\nimport {\n  IChart, IOnCanvasClick, IOnCanvasDrop, IOnDeleteKey, IOnDragCanvas, IOnDragNode, IOnLinkCancel,\n  IOnLinkComplete, IOnLinkMouseEnter, IOnLinkMouseLeave, IOnLinkMove, IOnLinkStart, IOnNodeClick, IOnPortPositionChange,\n} from '../'\n\n/**\n * This file contains actions for updating state after each of the required callbacks\n */\n\nexport const onDragNode: IOnDragNode = (event, data, id) => (chart: IChart) => {\n  const nodechart = chart.nodes[id]\n\n  return nodechart ? {\n    ...chart,\n    nodes: {\n      ...chart.nodes,\n      [id]: {\n        ...chart.nodes[id],\n        position: {\n          x: data.x,\n          y: data.y,\n        },\n      },\n    },\n  } : chart\n}\n\nexport const onDragCanvas: IOnDragCanvas = (event, data) => (chart: IChart): IChart => {\n  chart.offset.x = data.x\n  chart.offset.y = data.y\n  return chart\n}\n\nexport const onLinkStart: IOnLinkStart = ({ linkId, fromNodeId, fromPortId }) => (chart: IChart): IChart => {\n  chart.links[linkId] = {\n    id: linkId,\n    from: {\n      nodeId: fromNodeId,\n      portId: fromPortId,\n    },\n    to: {},\n  }\n  return chart\n}\n\nexport const onLinkMove: IOnLinkMove = ({ linkId, toPosition }) => (chart: IChart): IChart => {\n  chart.links[linkId].to.position = toPosition\n  return chart\n}\n\nexport const onLinkComplete: IOnLinkComplete = ({ linkId, fromNodeId, toNodeId, toPortId }) =>\n  (chart: IChart): IChart => {\n    if (fromNodeId !== toPortId) {\n      chart.links[linkId].to = {\n        nodeId: toNodeId,\n        portId: toPortId,\n      }\n    }\n    return chart\n  }\n\nexport const onLinkCancel: IOnLinkCancel = ({ linkId }) => (chart: IChart) => {\n  delete chart.links[linkId]\n  return chart\n}\n\nexport const onLinkMouseEnter: IOnLinkMouseEnter = ({ linkId }) => (chart: IChart) => {\n  // Set the link to hover\n  const link = chart.links[linkId]\n  // Set the connected ports to hover\n  if (link.to.nodeId && link.to.portId) {\n    if (chart.hovered.type !== 'link' || chart.hovered.id !== linkId) {\n      chart.hovered = {\n        type: 'link',\n        id: linkId,\n      }\n    }\n  }\n  return chart\n}\n\nexport const onLinkMouseLeave: IOnLinkMouseLeave = ({ linkId }) => (chart: IChart) => {\n  const link = chart.links[linkId]\n  // Set the connected ports to hover\n  if (link.to.nodeId && link.to.portId) {\n    chart.hovered = {}\n  }\n  return chart\n}\n\nexport const onLinkClick: IOnLinkMouseLeave = ({ linkId }) => (chart: IChart) => {\n  if (chart.selected.id !== linkId || chart.selected.type !== 'link') {\n    chart.selected = {\n      type: 'link',\n      id: linkId,\n    }\n  }\n  return chart\n}\n\nexport const onCanvasClick: IOnCanvasClick = () => (chart: IChart) => {\n  if (chart.selected.id) {\n    chart.selected = {}\n  }\n  return chart\n}\n\nexport const onDeleteKey: IOnDeleteKey = () => (chart: IChart) => {\n  if (chart.selected.type === 'node' && chart.selected.id) {\n    const node = chart.nodes[chart.selected.id]\n    // Delete the connected links\n    Object.keys(chart.links).forEach((linkId) => {\n      const link = chart.links[linkId]\n      if (link.from.nodeId === node.id || link.to.nodeId === node.id) {\n        delete chart.links[link.id]\n      }\n    })\n    // Delete the node\n    delete chart.nodes[chart.selected.id]\n  } else if (chart.selected.type === 'link' && chart.selected.id) {\n    delete chart.links[chart.selected.id]\n  }\n  if (chart.selected) {\n    chart.selected = {}\n  }\n  return chart\n}\n\nexport const onNodeClick: IOnNodeClick = ({ nodeId }) => (chart: IChart) => {\n  if (chart.selected.id !== nodeId || chart.selected.type !== 'node') {\n    chart.selected = {\n      type: 'node',\n      id: nodeId,\n    }\n  }\n  return chart\n}\n\nexport const onPortPositionChange: IOnPortPositionChange = (nodeToUpdate, port, position) =>\n  (chart: IChart): IChart => {\n    const node = chart.nodes[nodeToUpdate.id]\n    node.ports[port.id].position = {\n      x: position.x,\n      y: position.y,\n    }\n\n    chart.nodes[nodeToUpdate.id] = { ...node }\n\n    return chart\n  }\n\nexport const onCanvasDrop: IOnCanvasDrop = ({ data, position }) => (chart: IChart): IChart => {\n  const id = v4()\n  chart.nodes[id] = {\n    id,\n    position,\n    type: data.type,\n    ports: data.ports,\n    properties: data.properties,\n  }\n  return chart\n}\n","export * from './FlowChartWithState'\n","export default function mapValues<\n  Obj extends object,\n  Res extends { [key in keyof Obj]: any }\n> (o: Obj, func: (value: Obj[keyof Obj]) => Res[keyof Obj]) {\n  const res: Res = {} as any\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      res[key] = func(o[key])\n    }\n  }\n  return res\n}\n","export * from './components'\nexport * from './container'\nexport * from './types'\nexport * from './constants'\n","var map = {\n\t\"./CustomCanvasOuter.tsx\": \"./stories/CustomCanvasOuter.tsx\",\n\t\"./CustomNode.tsx\": \"./stories/CustomNode.tsx\",\n\t\"./CustomNodeInner.tsx\": \"./stories/CustomNodeInner.tsx\",\n\t\"./CustomPort.tsx\": \"./stories/CustomPort.tsx\",\n\t\"./DragAndDropSidebar.tsx\": \"./stories/DragAndDropSidebar.tsx\",\n\t\"./ExternalReactState.tsx\": \"./stories/ExternalReactState.tsx\",\n\t\"./InternalReactState.tsx\": \"./stories/InternalReactState.tsx\",\n\t\"./SelectedSidebar.tsx\": \"./stories/SelectedSidebar.tsx\",\n\t\"./StressTest.tsx\": \"./stories/StressTest.tsx\",\n\t\"./components/Content.tsx\": \"./stories/components/Content.tsx\",\n\t\"./components/Page.tsx\": \"./stories/components/Page.tsx\",\n\t\"./components/Sidebar.tsx\": \"./stories/components/Sidebar.tsx\",\n\t\"./components/SidebarItem.tsx\": \"./stories/components/SidebarItem.tsx\",\n\t\"./components/index.ts\": \"./stories/components/index.ts\",\n\t\"./index.tsx\": \"./stories/index.tsx\",\n\t\"./misc/exampleChartState.ts\": \"./stories/misc/exampleChartState.ts\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./stories sync recursive \\\\.tsx?$\";","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState, ICanvasOuterDefaultProps } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst CanvasOuterCustom = styled.div<ICanvasOuterDefaultProps>`\n  position: relative;\n  background-size: 10px 10px;\n  background-color: #4f6791;\n  background-image:\n    linear-gradient(90deg,hsla(0,0%,100%,.1) 1px,transparent 0),\n    linear-gradient(180deg,hsla(0,0%,100%,.1) 1px,transparent 0);\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  cursor: not-allowed;\n` as any\n\nexport const CustomCanvasOuterDemo = () => {\n  return (\n    <Page>\n      <FlowChartWithState\n        initialValue={chartSimple}\n        Components={ {\n          CanvasOuter: CanvasOuterCustom,\n        }}\n      />\n    </Page>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState, INodeDefaultProps } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst DarkBox = styled.div`\n  position: absolute;\n  padding: 30px;\n  background: #3e3e3e;\n  color: white;\n  border-radius: 10px;\n`\n\nconst Circle = styled.div`\n  position: absolute;\n  width: 150px;\n  height: 150px;\n  padding: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #d30000;\n  color: white;\n  border-radius: 50%;\n`\n\n/**\n * Create the custom component,\n * Make sure it has the same prop signature\n * You'll need to add {...otherProps} so the event listeners are added to your component\n */\nconst NodeCustom = ({ node, children, ...otherProps }: INodeDefaultProps) => {\n  if (node.type === 'output-only') {\n    return (\n      <DarkBox {...otherProps}>\n        {children}\n      </DarkBox>\n    )\n  } else {\n    return (\n      <Circle {...otherProps}>\n        {children}\n      </Circle>\n    )\n  }\n}\n\nexport const CustomNodeDemo = () => {\n  return (\n    <Page>\n      <FlowChartWithState\n        initialValue={chartSimple}\n        Components={ {\n          Node: NodeCustom,\n        }}\n      />\n    </Page>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState, INodeInnerDefaultProps } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst Outer = styled.div`\n  padding: 30px;\n`\n\nconst Input = styled.input`\n  padding: 10px;\n  border: 1px solid cornflowerblue;\n  width: 100%;\n`\n\n/**\n * Create the custom component,\n * Make sure it has the same prop signature\n */\nconst NodeInnerCustom = ({ node }: INodeInnerDefaultProps) => {\n  if (node.type === 'output-only') {\n    return (\n      <Outer>\n        <p>Use Node inner to customise the content of the node</p>\n      </Outer>\n    )\n  } else {\n    return (\n      <Outer>\n        <p>Add custom displays for each node.type</p>\n        <p>You may need to stop event propagation so your forms work.</p>\n        <br />\n        <Input\n          placeholder=\"Add forms etc if required\"\n          onClick={(e) => e.stopPropagation()}\n          onMouseUp={(e) => e.stopPropagation()}\n          onMouseDown={(e) => e.stopPropagation()}\n        />\n      </Outer>\n    )\n  }\n}\n\nexport const CustomNodeInnerDemo = () => {\n  return (\n    <Page>\n      <FlowChartWithState\n        initialValue={chartSimple}\n        Components={ {\n          NodeInner: NodeInnerCustom,\n        }}\n      />\n    </Page>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState, IPortDefaultProps } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst PortDefaultOuter = styled.div`\n  width: 24px;\n  height: 24px;\n  background: cornflowerblue;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PortCustom = (props: IPortDefaultProps) => (\n  <PortDefaultOuter>\n    { props.port.properties && props.port.properties.value === 'yes' && (\n      <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\n        <path fill=\"white\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\" />\n      </svg>\n    )}\n    { props.port.properties && props.port.properties.value === 'no' && (\n      <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\n        <path fill=\"white\" d=\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\" />\n      </svg>\n    )}\n    { !props.port.properties && (\n      <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\n        <path fill=\"white\" d=\"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\" />\n      </svg>\n    )}\n  </PortDefaultOuter>\n)\n\nexport const CustomPortDemo = () => {\n  return (\n    <Page>\n      <FlowChartWithState\n        initialValue={chartSimple}\n        Components={ {\n          Port: PortCustom,\n        }}\n      />\n    </Page>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChartWithState } from '../src'\nimport { Content, Page, Sidebar, SidebarItem } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst Message = styled.div`\nmargin: 10px;\npadding: 10px;\nbackground: rgba(0,0,0,0.05);\n`\n\nexport const DragAndDropSidebar = () => (\n  <Page>\n    <Content>\n      <FlowChartWithState initialValue={chartSimple} />\n    </Content>\n    <Sidebar>\n      <Message>\n        Drag and drop these items onto the canvas.\n      </Message>\n      <SidebarItem\n        type=\"top/bottom\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'top',\n            properties: {\n              custom: 'property',\n            },\n          },\n          port2: {\n            id: 'port1',\n            type: 'bottom',\n            properties: {\n              custom: 'property',\n            },\n          },\n        } }\n        properties={ {\n          custom: 'property',\n        }}\n      />\n      <SidebarItem\n        type=\"bottom-only\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'bottom',\n            properties: {\n              custom: 'property',\n            },\n          },\n        }}\n      />\n      <SidebarItem\n        type=\"left-right\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'left',\n            properties: {\n              custom: 'property',\n            },\n          },\n          port2: {\n            id: 'port2',\n            type: 'right',\n            properties: {\n              custom: 'property',\n            },\n          },\n        }}\n      />\n      <SidebarItem\n        type=\"all-sides\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'left',\n\n          },\n          port2: {\n            id: 'port2',\n            type: 'right',\n          },\n          port3: {\n            id: 'port3',\n            type: 'top',\n          },\n          port4: {\n            id: 'port4',\n            type: 'bottom',\n          },\n        }}\n      />\n      <SidebarItem\n        type=\"lots-of-ports\"\n        ports={ {\n          port1: {\n            id: 'port1',\n            type: 'left',\n\n          },\n          port2: {\n            id: 'port2',\n            type: 'right',\n          },\n          port3: {\n            id: 'port3',\n            type: 'top',\n          },\n          port4: {\n            id: 'port4',\n            type: 'bottom',\n          },\n          port5: {\n            id: 'port5',\n            type: 'left',\n          },\n          port6: {\n            id: 'port6',\n            type: 'right',\n          },\n          port7: {\n            id: 'port7',\n            type: 'top',\n          },\n          port8: {\n            id: 'port8',\n            type: 'bottom',\n          },\n          port9: {\n            id: 'port9',\n            type: 'left',\n          },\n          port10: {\n            id: 'port10',\n            type: 'right',\n          },\n          port11: {\n            id: 'port11',\n            type: 'top',\n          },\n          port12: {\n            id: 'port12',\n            type: 'bottom',\n          },\n        }}\n      />\n    </Sidebar>\n  </Page>\n)\n","import { cloneDeep, mapValues } from 'lodash'\nimport * as React from 'react'\nimport { FlowChart } from '../src'\nimport * as actions from '../src/container/actions'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\n/**\n * State is external to the <FlowChart> Element\n *\n * You could easily move this state to Redux or similar by creating your own callback actions.\n */\nexport class ExternalReactState extends React.Component {\n  public state = cloneDeep(chartSimple)\n  public render () {\n    const chart = this.state\n    const stateActions = mapValues(actions, (func: any) =>\n      (...args: any) => this.setState(func(...args))) as typeof actions\n\n    return (\n      <Page>\n        <FlowChart\n          chart={chart}\n          callbacks={stateActions}\n        />\n      </Page>\n    )\n  }\n}\n","import * as React from 'react'\nimport { FlowChartWithState } from '../src'\nimport { Page } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nexport const InternalReactState = () => {\n  return (\n    <Page>\n      <FlowChartWithState initialValue={chartSimple}/>\n    </Page>\n  )\n}\n","import { cloneDeep, mapValues } from 'lodash'\nimport * as React from 'react'\nimport styled from 'styled-components'\nimport { FlowChart } from '../src'\nimport * as actions from '../src/container/actions'\nimport { Content, Page, Sidebar } from './components'\nimport { chartSimple } from './misc/exampleChartState'\n\nconst Message = styled.div`\n  margin: 10px;\n  padding: 10px;\n  line-height: 1.4em;\n`\n\nconst Button = styled.div`\n  padding: 10px 15px;\n  background: cornflowerblue;\n  color: white;\n  border-radius: 3px;\n  text-align: center;\n  transition: 0.3s ease all;\n  cursor: pointer;\n  &:hover {\n    box-shadow: 0 10px 20px rgba(0,0,0,.1);\n  }\n  &:active {\n    background: #5682d2;\n  }\n`\n\nexport class SelectedSidebar extends React.Component {\n  public state = cloneDeep(chartSimple)\n  public render () {\n    const chart = this.state\n    const stateActions = mapValues(actions, (func: any) =>\n      (...args: any) => this.setState(func(...args))) as typeof actions\n\n    return (\n      <Page>\n        <Content>\n          <FlowChart\n            chart={chart}\n            callbacks={stateActions}\n          />\n        </Content>\n        <Sidebar>\n          { chart.selected.type\n          ? <Message>\n              <div>Type: {chart.selected.type}</div>\n              <div>ID: {chart.selected.id}</div>\n              <br/>\n              {/*\n                We can re-use the onDeleteKey action. This will delete whatever is selected.\n                Otherwise, we have access to the state here so we can do whatever we want.\n              */}\n              <Button onClick={() => stateActions.onDeleteKey()}>Delete</Button>\n            </Message>\n          : <Message>Click on a Node, Port or Link</Message> }\n        </Sidebar>\n      </Page>\n    )\n  }\n}\n","import { compact, flatMap, flatten, keyBy, range } from 'lodash'\nimport * as React from 'react'\nimport { FlowChartWithState } from '../src'\nimport { Page } from './components'\n\nconst getChart = (rows: number, cols: number) => {\n  const xyGrid = flatten(range(0, cols * 300, 300).map((x) => range(0, rows * 150, 150).map((y) => ({ x, y }))))\n\n  return {\n    offset: {\n      x: 0,\n      y: 0,\n    },\n    nodes: keyBy(xyGrid.map(({ x, y }) => ({\n      id: `node-${x}-${y}`,\n      type: 'default',\n      position: { x: x + 100, y: y + 100 },\n      ports: {\n        port1: {\n          id: 'port1',\n          type: 'top',\n        },\n        port2: {\n          id: 'port2',\n          type: 'bottom',\n        },\n        port3: {\n          id: 'port3',\n          type: 'right',\n        },\n        port4: {\n          id: 'port4',\n          type: 'left',\n        },\n      },\n    })), 'id'),\n    links: keyBy(compact(flatMap(xyGrid, ({ x, y }, idx) => {\n      const next = xyGrid[idx + 1]\n      if (next) {\n        return [{\n          id: `link-${x}-${y}-a`,\n          from: {\n            nodeId: `node-${x}-${y}`,\n            portId: 'port2',\n          },\n          to: {\n            nodeId: `node-${next.x}-${next.y}`,\n            portId: 'port3',\n          },\n        }, {\n          id: `link-${x}-${y}-b`,\n          from: {\n            nodeId: `node-${x}-${y}`,\n            portId: 'port2',\n          },\n          to: {\n            nodeId: `node-${next.x}-${next.y}`,\n            portId: 'port4',\n          },\n        }]\n      }\n      return undefined\n    })), 'id') as any,\n    selected: {},\n    hovered: {},\n  }\n}\n\nconst StressTestWithState = () => {\n  const [rows, setRows] = React.useState(10)\n  const [cols, setCols] = React.useState(10)\n\n  const chart = React.useMemo(() => getChart(rows, cols), [rows, cols])\n\n  return (\n    <div>\n      <label>Columns:</label>\n      <input type=\"number\" value={cols} onChange={(e) => setCols(parseInt(e.target.value, 10))} />\n      <label>Rows:</label>\n      <input type=\"number\" value={rows} onChange={(e) => setRows(parseInt(e.target.value, 10))} />\n      <Page>\n        <FlowChartWithState key={`${cols}:${rows}`} initialValue={chart} />\n      </Page>\n    </div>\n  )\n}\n\nexport const StressTestDemo = () => {\n  return <StressTestWithState />\n}\n","import styled from 'styled-components'\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: hidden;\n`\n","import * as React from 'react'\nimport styled, { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0px;\n    max-width: 100vw;\n    max-height: 100vh;\n    overflow: hidden;\n    box-sizing: border-box;\n    font-family: sans-serif;\n  }\n\n  *, :after, :before {\n    box-sizing: inherit;\n  }\n`\n\nconst PageContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  max-width: 100vw;\n  max-height: 100vh;\n`\n\nexport const Page = ({ children }: { children: any}) => (\n  <PageContent>\n    {children}\n    <GlobalStyle />\n  </PageContent>\n)\n","import styled from 'styled-components'\n\nexport const Sidebar = styled.div`\n  width: 300px;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { INode, REACT_FLOW_CHART } from '../../src'\n\nconst Outer = styled.div`\n  padding: 20px 30px;\n  font-size: 14px;\n  background: white;\n  cursor: move;\n`\n\nexport interface ISidebarItemProps {\n  type: string,\n  ports: INode['ports'],\n  properties?: any,\n}\n\nexport const SidebarItem = ({ type, ports, properties }: ISidebarItemProps) => {\n  return (\n    <Outer\n      draggable={true}\n      onDragStart={ (event) => {\n        event.dataTransfer.setData(REACT_FLOW_CHART, JSON.stringify({ type, ports, properties }))\n      } }\n    >\n      {type}\n    </Outer>\n  )\n}\n","export * from './Content'\nexport * from './Page'\nexport * from './Sidebar'\nexport * from './SidebarItem'\n","import { storiesOf } from '@storybook/react'\nimport * as React from 'react'\nimport { CustomCanvasOuterDemo } from './CustomCanvasOuter'\nimport { CustomNodeDemo } from './CustomNode'\nimport { CustomNodeInnerDemo } from './CustomNodeInner'\nimport { CustomPortDemo } from './CustomPort'\nimport { DragAndDropSidebar } from './DragAndDropSidebar'\nimport { ExternalReactState } from './ExternalReactState'\nimport { InternalReactState } from './InternalReactState'\nimport { SelectedSidebar } from './SelectedSidebar'\nimport { StressTestDemo } from './StressTest'\n\nstoriesOf('State', module)\n  .add('Internal React State', InternalReactState)\n  .add('External React State', () => <ExternalReactState />)\n\nstoriesOf('Custom Components', module)\n  .add('Node', CustomNodeDemo)\n  .add('Node Inner', CustomNodeInnerDemo)\n  .add('Port', CustomPortDemo)\n  .add('Canvas Outer', CustomCanvasOuterDemo)\n\nstoriesOf('Stress Testing', module)\n  .add('default', StressTestDemo)\n\nstoriesOf('Sidebar', module)\n  .add('Drag and Drop', DragAndDropSidebar)\n  .add('Selected Sidebar', () => <SelectedSidebar />)\n","import { IChart } from '../../src'\n\nexport const chartSimple: IChart = {\n  offset: {\n    x: 0,\n    y: 0,\n  },\n  nodes: {\n    node1: {\n      id: 'node1',\n      type: 'output-only',\n      position: {\n        x: 300,\n        y: 100,\n      },\n      ports: {\n        port1: {\n          id: 'port1',\n          type: 'output',\n          properties: {\n            value: 'yes',\n          },\n        },\n        port2: {\n          id: 'port2',\n          type: 'output',\n          properties: {\n            value: 'no',\n          },\n        },\n      },\n    },\n    node2: {\n      id: 'node2',\n      type: 'input-output',\n      position: {\n        x: 300,\n        y: 300,\n      },\n      ports: {\n        port1: {\n          id: 'port1',\n          type: 'input',\n        },\n        port2: {\n          id: 'port2',\n          type: 'output',\n        },\n      },\n    },\n    node3: {\n      id: 'node3',\n      type: 'input-output',\n      position: {\n        x: 100,\n        y: 600,\n      },\n      ports: {\n        port1: {\n          id: 'port1',\n          type: 'input',\n        },\n        port2: {\n          id: 'port2',\n          type: 'output',\n        },\n      },\n    },\n    node4: {\n      id: 'node4',\n      type: 'input-output',\n      position: {\n        x: 500,\n        y: 600,\n      },\n      ports: {\n        port1: {\n          id: 'port1',\n          type: 'input',\n        },\n        port2: {\n          id: 'port2',\n          type: 'output',\n        },\n      },\n    },\n  },\n  links: {\n    link1: {\n      id: 'link1',\n      from: {\n        nodeId: 'node1',\n        portId: 'port2',\n      },\n      to: {\n        nodeId: 'node2',\n        portId: 'port1',\n      },\n    },\n    link2: {\n      id: 'link2',\n      from: {\n        nodeId: 'node2',\n        portId: 'port2',\n      },\n      to: {\n        nodeId: 'node3',\n        portId: 'port1',\n      },\n    },\n    link3: {\n      id: 'link3',\n      from: {\n        nodeId: 'node2',\n        portId: 'port2',\n      },\n      to: {\n        nodeId: 'node4',\n        portId: 'port1',\n      },\n    },\n  },\n  selected: {},\n  hovered: {},\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAMA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AAkBA;AAAA;AAAA;;AA6CA;AA5CA;AACA;AAWA;AAEA;AAMA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAAA;AA7CA;;;;;;;;;;;;;;;;;;;ACpBA;AAYA;;;;;;;;;;;;;;;;;;;;ACZA;AAMA;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAmDA;AAEA;AA2BA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAEA;AAkBA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAoBA;AACA;AAQA;AACA;AAkBA;;;;;;;;;;;;;;;;;;ACzMA;;;;;;;;;;;;;;;ACAA;AACA;AAaA;AACA;AASA;AAEA;AAEA;AAOA;AAOA;AAUA;AACA;AACA;AAEA;AAQA;;;;;;;;;;;;;;;AChEA;AAEA;AACA;AAcA;AACA;AAUA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAYA;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACRA;AACA;;;;;;;;;;;;;;;;;;;ACDA;AAWA;AAUA;;;;;;;;;;;;;;;;ACrBA;AACA;AAEA;AAWA;AACA;AAOA;AAOA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAMA;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAOA;AAIA;AAAA;AACA;AAEA;;AAAA;AAGA;;;;;;;;;;;;;;;;;;;AClBA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAWA;AAcA;AAQA;AAAA;AAAA;AAEA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAuCA;AAtCA;AACA;AAWA;AAQA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AAAA;AAnHA;;;;;;;;;;;;;;;;;;ACrCA;AACA;;;;;;;;;;;;;;;ACDA;AACA;AAMA;AAAA;AACA;AAEA;AAGA;AAGA;AAGA;AAKA;;;;;;;;;;;;;;;;;;ACxBA;;;;;;;;;;;;;;;;;;;ACAA;AAMA;AA+CA;AAzCA;AACA;AASA;AAAA;AACA;AASA;AAAA;AACA;AASA;AAAA;AACA;AASA;AACA;;;;;;;;;;;;;;;;;;;ACrDA;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAOA;;AAEA;AACA;AAAA;AAKA;AAAA;AAHA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIA;;AACA;AACA;AACA;AAEA;AAOA;AACA;AAAA;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AAMA;;AAEA;AAEA;;AACA;AAEA;AAOA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAVA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;;;;;;;;;;;;;;;;;ACxJA;;;;;;;;;;;;;;;ACAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AAEA;AAGA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAaA;;;;AAIA;AANA;AAEA;;;;AAIA;AACA;AAAA;AACA;AACA;AAKA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAMA;;;AAGA;AALA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AAMA;AACA;AAEA;AAGA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;;AAeA;AAdA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEA;AAEA;AAMA;AACA;AAAA;AAhBA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAgBA;AAAA;AAAA;AAAA;AACA;;AA+BA;AA9BA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;;AAAA;AACA;;AAAA;AACA;AAKA;AAEA;AAIA;AACA;AAAA;AAhCA;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAuBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzFA;AAEA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAeA;AAQA;AAAA;AAAA;AAEA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;AC1BA;AAEA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AAEA;AAaA;AAAA;AACA;AAIA;AACA;AAKA;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACzsourceRoot":""}