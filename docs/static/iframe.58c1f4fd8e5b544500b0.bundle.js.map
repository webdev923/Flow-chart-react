{"version":3,"file":"static/iframe.58c1f4fd8e5b544500b0.bundle.js","sources":["webpack:///./config/storybook/config.js","webpack:///./src/components/Canvas/Canvas.wrapper.tsx","webpack:///./src/components/Canvas/CanvasInner.default.tsx","webpack:///./src/components/Canvas/CanvasOuter.default.tsx","webpack:///./src/components/Canvas/index.tsx","webpack:///./src/components/FlowChart/FlowChart.tsx","webpack:///./src/components/FlowChart/index.ts","webpack:///./src/components/Link/Link.default.tsx","webpack:///./src/components/Link/Link.wrapper.tsx","webpack:///./src/components/Link/index.ts","webpack:///./src/components/Link/utils/getLinkPosition.ts","webpack:///./src/components/Link/utils/index.ts","webpack:///./src/components/Node/Node.default.tsx","webpack:///./src/components/Node/Node.wrapper.tsx","webpack:///./src/components/Node/index.ts","webpack:///./src/components/NodeInner/NodeInner.default.tsx","webpack:///./src/components/NodeInner/index.ts","webpack:///./src/components/Port/Port.default.tsx","webpack:///./src/components/Port/Port.wrapper.tsx","webpack:///./src/components/Port/index.ts","webpack:///./src/components/Ports/Ports.default.tsx","webpack:///./src/components/Ports/index.ts","webpack:///./src/components/PortsGroup/PortsGroup.default.tsx","webpack:///./src/components/PortsGroup/index.ts","webpack:///./src/components/index.ts","webpack:///./src/constants.ts","webpack:///./src/container/FlowChartWithState.tsx","webpack:///./src/container/actions.ts","webpack:///./src/container/index.ts","webpack:///./src/index.ts","webpack:///./stories sync \\.tsx","webpack:///./stories/WithSidebar.tsx","webpack:///./stories/WithState.story.tsx","webpack:///./stories/components/Content.tsx","webpack:///./stories/components/Page.tsx","webpack:///./stories/components/Sidebar.tsx","webpack:///./stories/components/SidebarItem.tsx","webpack:///./stories/components/index.ts","webpack:///./stories/exampleChartState.ts"],"sourcesContent":["import { setOptions } from \"@storybook/addon-options\"\nimport { configure } from \"@storybook/react\"\nimport { configureViewport, INITIAL_VIEWPORTS } from \"@storybook/addon-viewport\"\n\nsetOptions({\n\thierarchySeparator: /\\/|\\./,\n\thierarchyRootSeparator: /\\|/,\n})\n\nconfigureViewport({\n\tviewports: {\n\t\t...INITIAL_VIEWPORTS\n\t}\n})\n\nfunction requireAll(requireContext) {\n\treturn requireContext.keys().map(requireContext);\n}\n\nfunction loadStories() {\n\trequireAll(require.context(\"../../stories\", true, /\\.tsx?$/));\n}\n\nconfigure(loadStories, module);","import * as React from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport { IOnDragCanvas, IOnCanvasClick, IOnDeleteKey, IOnCanvasDrop } from 'types'\r\nimport { ICanvasInnerDefaultProps, CanvasInnerDefault } from './CanvasInner.default';\r\nimport { ICanvasOuterDefaultProps, CanvasOuterDefault } from './CanvasOuter.default';\r\nimport { REACT_FLOW_CHART } from '../../'\r\n\r\nexport interface ICanvasWrapperProps {\r\n  position: {\r\n    x: number\r\n    y: number\r\n  }\r\n  onDragCanvas: IOnDragCanvas\r\n  onDeleteKey: IOnDeleteKey\r\n  onCanvasClick: IOnCanvasClick\r\n  onCanvasDrop: IOnCanvasDrop\r\n  ComponentInner?: React.SFC<ICanvasInnerDefaultProps>\r\n  ComponentOuter?: React.SFC<ICanvasOuterDefaultProps>\r\n  children: any\r\n}\r\n\r\nexport class CanvasWrapper extends React.Component<ICanvasWrapperProps>{\r\n  render() {\r\n    const { \r\n      ComponentInner = CanvasInnerDefault, \r\n      ComponentOuter = CanvasOuterDefault, \r\n      position, \r\n      onDragCanvas,\r\n      children,\r\n      onCanvasClick,\r\n      onDeleteKey,\r\n      onCanvasDrop,\r\n    } = this.props\r\n\r\n    return (\r\n      <ComponentOuter>\r\n        <Draggable\r\n          axis=\"both\"\r\n          position={position}\r\n          grid={[1, 1]}\r\n          onDrag={ (e, dragData) => onDragCanvas(e, dragData) }\r\n        >\r\n          <ComponentInner \r\n            children={ children } \r\n            onClick={ onCanvasClick }\r\n            tabIndex={ 0 }\r\n            onKeyDown={ (e: React.KeyboardEvent) => {\r\n              if (e.keyCode === 46) {\r\n                onDeleteKey()\r\n              }\r\n            }}\r\n            onDrop={ (e) => {\r\n              const data = JSON.parse(e.dataTransfer.getData(REACT_FLOW_CHART))\r\n              onCanvasDrop({ data, position: {\r\n                x: 300, \r\n                y: 300\r\n              }})\r\n              // const data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'))\r\n              // const node = new CustomNodeModel(data.nodeType)\r\n              // const points = diagramEngine.getRelativeMousePoint(event)\r\n              // node.x = points.x\r\n              // node.y = points.y\r\n              // addNode(node)\r\n            } }\r\n            onDragOver={ (e) => {\r\n              e.preventDefault()\r\n            } }\r\n          />\r\n        </Draggable>\r\n      </ComponentOuter>\r\n    )\r\n  }\r\n}\r\n\r\n","import styled from 'styled-components'\r\nimport { IOnCanvasClick } from 'types';\r\n\r\nexport interface ICanvasInnerDefaultProps {\r\n  children: any\r\n  onClick: IOnCanvasClick\r\n  tabIndex: number\r\n  onKeyDown: (e: React.KeyboardEvent) => void\r\n  onDrop: (e: React.DragEvent<HTMLDivElement>) => void\r\n  onDragOver: (e: React.DragEvent<HTMLDivElement>) => void\r\n}\r\n\r\nexport const CanvasInnerDefault = styled.div<ICanvasInnerDefaultProps>`\r\n  position: relative;\r\n  outline: 1px dashed rgba(0,0,0,0.1);\r\n  width: 10000px;\r\n  height: 10000px;\r\n  cursor: move;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport interface ICanvasOuterDefaultProps {\r\n  children: any\r\n}\r\n\r\nexport const CanvasOuterDefault = styled.div<ICanvasOuterDefaultProps>`\r\n  position: relative;\r\n  background-size: 20px 20px;\r\n  background-color: rgba(0,0,0,0.08);\r\n  background-image: linear-gradient(90deg,hsla(0,0%,100%,.2) 1px,transparent 0),linear-gradient(180deg,hsla(0,0%,100%,.2) 1px,transparent 0);\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  cursor: not-allowed;\r\n`\r\n","export * from './CanvasInner.default'\r\nexport * from './CanvasOuter.default'\r\nexport * from './Canvas.wrapper'\r\n","import * as React from \"react\"\r\nimport { \r\n  IOnLinkMouseEnter, IOnLinkMouseLeave, IOnLinkClick, IOnCanvasClick, IOnDeleteKey, IOnNodeClick, CanvasWrapper, \r\n  NodeWrapper, IOnDragCanvas, PortWrapper, LinkWrapper, IChart, IOnPortPositionChange, IOnLinkCancel, IOnLinkStart, \r\n  IOnLinkMove, IOnLinkComplete, PortsDefault , IOnDragNode, IOnCanvasDrop, NodeInnerDefault,\r\n  NodeDefault, INodeDefaultProps, PortDefault, IPortDefaultProps, LinkDefault, ILinkDefaultProps, INodeInnerDefaultProps, \r\n  IPortsDefaultProps,\r\n} from '../../'\r\nimport { map } from 'lodash'\r\n\r\nexport interface IFlowChartProps {\r\n  /** \r\n   * The current chart state\r\n   */\r\n  chart: IChart\r\n  /** \r\n   * Callbacks for updating chart state.\r\n   * See container/actions.ts for example state mutations\r\n   */\r\n  callbacks: {\r\n    onDragNode: IOnDragNode\r\n    onDragCanvas: IOnDragCanvas\r\n    onCanvasDrop: IOnCanvasDrop\r\n    onLinkStart: IOnLinkStart\r\n    onLinkMove: IOnLinkMove\r\n    onLinkComplete: IOnLinkComplete\r\n    onLinkCancel: IOnLinkCancel\r\n    onPortPositionChange: IOnPortPositionChange\r\n    onLinkMouseEnter: IOnLinkMouseEnter\r\n    onLinkMouseLeave: IOnLinkMouseLeave\r\n    onLinkClick: IOnLinkClick\r\n    onCanvasClick: IOnCanvasClick\r\n    onDeleteKey: IOnDeleteKey\r\n    onNodeClick: IOnNodeClick\r\n  }\r\n  /**\r\n   * Custom components\r\n   */\r\n  Components?: {\r\n    NodeInner?: React.SFC<INodeInnerDefaultProps>\r\n    Ports?: React.SFC<IPortsDefaultProps>\r\n    Port?: React.SFC<IPortDefaultProps>\r\n    Node?: React.SFC<INodeDefaultProps>\r\n    Link?: React.SFC<ILinkDefaultProps>\r\n  }\r\n}\r\n\r\nexport const FlowChart = (props: IFlowChartProps) => {\r\n  const {\r\n    chart,\r\n    callbacks: {\r\n      onDragNode,\r\n      onDragCanvas,\r\n      onCanvasDrop,\r\n      onLinkStart,\r\n      onLinkMove,\r\n      onLinkComplete,\r\n      onLinkCancel,\r\n      onPortPositionChange,\r\n      onLinkMouseEnter,\r\n      onLinkMouseLeave,\r\n      onLinkClick,\r\n      onCanvasClick,\r\n      onDeleteKey,\r\n      onNodeClick,\r\n    },\r\n    Components: {\r\n      NodeInner = NodeInnerDefault,\r\n      Ports = PortsDefault,\r\n      Port = PortDefault,\r\n      Node = NodeDefault,\r\n      Link = LinkDefault,\r\n    } = {}\r\n  } = props\r\n  const { links, nodes, selected } = chart\r\n\r\n  const canvasCallbacks = { onDragCanvas, onCanvasClick, onDeleteKey, onCanvasDrop }\r\n  const linkCallbacks = { onLinkMouseEnter, onLinkMouseLeave, onLinkClick }\r\n  const nodeCallbacks = { onDragNode, onNodeClick }\r\n  const portCallbacks = { onPortPositionChange, onLinkStart, onLinkMove, onLinkComplete, onLinkCancel }\r\n\r\n  return (\r\n    <CanvasWrapper \r\n      position={ chart.offset } \r\n      { ...canvasCallbacks }\r\n    >\r\n      { map(links, link => (\r\n        <LinkWrapper \r\n          chart={ chart }\r\n          key={ link.id } \r\n          link={ link } \r\n          Component={ Link }\r\n          { ...linkCallbacks }\r\n        />\r\n      ))}\r\n      { map(nodes, node => (\r\n        <NodeWrapper\r\n          key={ node.id } \r\n          node={ node }\r\n          selected={ selected }\r\n          Component={ Node }\r\n          { ...nodeCallbacks }\r\n        >\r\n          <NodeInner node={ node }/>\r\n          <Ports>\r\n            { map(node.ports, port => (\r\n              <PortWrapper\r\n                key={ port.id }\r\n                chart={ chart }\r\n                node={ node }\r\n                port={ port }\r\n                Component={ Port }\r\n                { ...portCallbacks }\r\n              />\r\n            )) }\r\n          </Ports>\r\n        </NodeWrapper>\r\n      ))}\r\n    </CanvasWrapper>\r\n  )\r\n}","export * from './FlowChart'","import * as React from 'react'\r\nimport { IPosition, IOnLinkMouseEnter, IOnLinkMouseLeave, IOnLinkClick, ILink } from 'types'\r\n\r\nexport interface ILinkDefaultProps {\r\n  link: ILink\r\n  startPos: IPosition\r\n  endPos: IPosition\r\n  onLinkMouseEnter: IOnLinkMouseEnter\r\n  onLinkMouseLeave: IOnLinkMouseLeave\r\n  onLinkClick: IOnLinkClick\r\n  isHovered: boolean\r\n  isSelected: boolean\r\n}\r\n\r\nexport const LinkDefault = ({\r\n  link,\r\n  startPos,\r\n  endPos,\r\n  onLinkMouseEnter,\r\n  onLinkMouseLeave,\r\n  onLinkClick,\r\n  isHovered,\r\n  isSelected,\r\n}: ILinkDefaultProps) => {\r\n  const points = `${startPos.x},${startPos.y} ${endPos.x},${endPos.y}`\r\n\r\n  return (\r\n    <svg style={{ overflow: 'visible', position: 'absolute', cursor: 'pointer' }}>\r\n      <circle\r\n        r=\"4\"\r\n        cx={ startPos.x }\r\n        cy={ startPos.y }\r\n        fill=\"cornflowerblue\"\r\n      />\r\n      {/* Main line */}\r\n      <polyline\r\n        points={ points }  \r\n        stroke=\"cornflowerblue\" \r\n        strokeWidth=\"3\"\r\n        fill=\"none\"\r\n      />\r\n      {/* Thick line to make selection easier */}\r\n      <polyline\r\n        points={ points }  \r\n        stroke=\"cornflowerblue\" \r\n        strokeWidth=\"20\"\r\n        fill=\"none\"\r\n        strokeLinecap=\"round\"\r\n        strokeOpacity={ (isHovered || isSelected) ? 0.1 : 0 }\r\n        onMouseEnter={() => onLinkMouseEnter({ linkId: link.id }) }\r\n        onMouseLeave={() => onLinkMouseLeave({ linkId: link.id }) }\r\n        onClick={(e) => {\r\n          onLinkClick({ linkId: link.id })\r\n          e.stopPropagation()\r\n        } }\r\n      />\r\n      <circle\r\n        r=\"4\"\r\n        cx={ endPos.x }\r\n        cy={ endPos.y }\r\n        fill=\"cornflowerblue\"\r\n      />\r\n    </svg>\r\n  )\r\n}","import * as React from 'react'\r\nimport { ILink, IChart, IOnLinkMouseEnter, IOnLinkMouseLeave } from 'types'\r\nimport { getLinkPosition } from './utils'\r\nimport { ILinkDefaultProps, LinkDefault } from './Link.default'\r\n\r\nexport interface ILinkWrapperProps {\r\n  link: ILink\r\n  chart: IChart\r\n  onLinkMouseEnter: IOnLinkMouseEnter\r\n  onLinkMouseLeave: IOnLinkMouseLeave\r\n  onLinkClick: IOnLinkMouseLeave\r\n  Component?: React.SFC<ILinkDefaultProps>\r\n}\r\n\r\nexport const LinkWrapper = ({ \r\n  Component = LinkDefault,\r\n  link,\r\n  chart,\r\n  onLinkMouseEnter,\r\n  onLinkMouseLeave,\r\n  onLinkClick\r\n}: ILinkWrapperProps) => {\r\n  const startPos = getLinkPosition(chart, link.from.nodeId, link.from.portId)\r\n\r\n  const endPos = link.to.nodeId && link.to.portId \r\n    ? getLinkPosition(chart, link.to.nodeId, link.to.portId) \r\n    : link.to.position\r\n\r\n  // Don't render the link yet if there is no end pos\r\n  // This will occur if the link was just created\r\n  if (!endPos) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Component\r\n      link={ link }\r\n      startPos={ startPos } \r\n      endPos={ endPos }\r\n      onLinkMouseEnter={ onLinkMouseEnter }\r\n      onLinkMouseLeave={ onLinkMouseLeave }\r\n      onLinkClick={ onLinkClick }\r\n      isSelected={ chart.selected.type === 'link' && chart.selected.id === link.id }\r\n      isHovered={ chart.hovered.type === 'link' && chart.hovered.id === link.id }\r\n    />\r\n  )\r\n}","export * from './Link.default'\r\nexport * from './Link.wrapper'\r\nexport * from './utils'","import { IChart, IPosition } from \"types\";\r\n\r\nexport const getLinkPosition = (chart: IChart, nodeId: string, portId: string): IPosition => {\r\n  const node = chart.nodes[nodeId]\r\n  const port = node.ports[portId]\r\n  return {\r\n    x: node.position.x + (port.position ? port.position.x : 0),\r\n    y: node.position.y + (port.position ? port.position.y : 0),\r\n  }\r\n}\r\n","export * from './getLinkPosition'\r\n","import styled, { css } from 'styled-components'\r\nimport { INode } from 'types';\r\n\r\nexport interface INodeDefaultProps {\r\n  node: INode\r\n  children: any\r\n  isSelected: boolean\r\n  onClick: (e: React.MouseEvent) => void\r\n}\r\n\r\nexport const NodeDefault = styled.div<INodeDefaultProps>`\r\n  position: absolute;\r\n  transition: 0.3s ease box-shadow, 0.3s ease margin-top;\r\n  ${props => props.isSelected && css`\r\n    box-shadow: 0 10px 20px rgba(0,0,0,.1);\r\n    margin-top: -2px\r\n    `\r\n  }\r\n` as any\r\n","import * as React from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport { IOnDragNode, IOnNodeClick, INode, ISelectedOrHovered } from 'types'\r\nimport { INodeDefaultProps, NodeDefault } from './Node.default'\r\n\r\nexport interface INodeWrapperProps {\r\n  node: INode\r\n  onDragNode: IOnDragNode\r\n  onNodeClick: IOnNodeClick\r\n  children: any\r\n  selected: ISelectedOrHovered\r\n  Component?: React.SFC<INodeDefaultProps>\r\n}\r\n\r\nexport const NodeWrapper = ({ \r\n  node, \r\n  onDragNode,\r\n  children,\r\n  onNodeClick,\r\n  selected,\r\n  Component = NodeDefault\r\n}: INodeWrapperProps) => {\r\n  return (\r\n    <Draggable\r\n      bounds=\"parent\"\r\n      axis=\"both\"\r\n      position={node.position}\r\n      grid={[1,1]}\r\n      onStart={ e => {\r\n        // Stop propagation so the canvas does not move\r\n        e.stopPropagation()\r\n      }}\r\n      onDrag={ (e, dragData) => onDragNode(e, dragData, node.id) }\r\n    >\r\n      <Component \r\n        children={ children } \r\n        onClick={ (e) => {\r\n          onNodeClick({ nodeId: node.id })\r\n          e.stopPropagation()\r\n        } }\r\n        isSelected={ selected.type === 'node' && selected.id === node.id }\r\n        node={ node }\r\n      />\r\n    </Draggable>\r\n  )\r\n}","export * from './Node.default'\r\nexport * from './Node.wrapper'\r\nexport * from './Node.default'","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport { INode } from 'types';\r\n\r\nexport interface INodeInnerDefaultProps {\r\n  node: INode\r\n}\r\n\r\nconst Outer = styled.div`\r\n  background: white;\r\n  border-radius: 4px;\r\n  width: 300px;\r\n  padding: 40px 30px;\r\n`\r\n\r\nexport const NodeInnerDefault = ({ node }: INodeInnerDefaultProps) => {\r\n  return (\r\n    <Outer>\r\n      <div>Type: { node.type }</div>\r\n    </Outer>\r\n  )\r\n}\r\n","export * from './NodeInner.default'\r\n","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport { IPort } from 'types'\r\n\r\nexport interface IPortDefaultProps {\r\n  port: IPort\r\n  isSelected: boolean\r\n  isHovered: boolean\r\n  isLinkSelected: boolean\r\n  isLinkHovered: boolean\r\n}\r\n\r\nconst PortDefaultOuter = styled.div`\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  background: white;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  &:hover > div {\r\n    background: cornflowerblue;\r\n  }\r\n`\r\n\r\nconst PortDefaultInner = styled.div<{ active: boolean }>`\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background:  ${props => props.active ? 'cornflowerblue' : 'grey' };\r\n  cursor: pointer;\r\n`\r\n\r\nexport const PortDefault = ({ isLinkSelected, isLinkHovered }: IPortDefaultProps) => (\r\n  <PortDefaultOuter>\r\n    <PortDefaultInner \r\n      active={ isLinkSelected || isLinkHovered } \r\n    />\r\n  </PortDefaultOuter>\r\n)\r\n","import * as React from 'react'\r\nimport { IPort, INode, IOnPortPositionChange, IOnLinkStart, IOnLinkMove, IOnLinkCancel, IOnLinkComplete, IChart } from 'types'\r\nimport { v4 } from 'uuid'\r\nimport { IPortDefaultProps, PortDefault } from './Port.default';\r\n\r\nexport interface IPortWrapperProps {\r\n  style?: object\r\n  chart: IChart\r\n  port: IPort\r\n  node: INode\r\n  onPortPositionChange: IOnPortPositionChange\r\n  Component: React.SFC<IPortDefaultProps>\r\n\r\n  // Link handlers\r\n  onLinkStart: IOnLinkStart\r\n  onLinkMove: IOnLinkMove\r\n  onLinkCancel: IOnLinkCancel\r\n  onLinkComplete: IOnLinkComplete\r\n}\r\n\r\nexport class PortWrapper extends React.Component<IPortWrapperProps> {\r\n  nodeRef?: HTMLDivElement \r\n  getNodRef = (el: HTMLDivElement) => {\r\n    if (el) {\r\n      const { node, port, onPortPositionChange } = this.props\r\n      this.nodeRef = el\r\n      const nodesEl = (el.parentElement && el.parentElement.offsetLeft !== undefined && el.parentElement.offsetTop !== undefined)\r\n        ? el.parentElement\r\n        : { offsetLeft: 0, offsetTop: 0 }\r\n\r\n      const position = {\r\n        x: el.offsetLeft + nodesEl.offsetLeft + el.offsetWidth / 2,\r\n        y: el.offsetTop + nodesEl.offsetTop + el.offsetHeight / 2,\r\n      }\r\n      onPortPositionChange(node, port, position)\r\n    }\r\n  }\r\n  onMouseDown = (startEvent: any) => {\r\n    const { node, port, onLinkStart, onLinkCancel, onLinkComplete, onLinkMove } = this.props\r\n    const linkId = v4()\r\n    const fromNodeId = node.id \r\n    const fromPortId = port.id \r\n\r\n    // Create the move handler\r\n    // This will update the position as the mouse moves\r\n    const mouseMoveHandler = (e: MouseEvent) => {\r\n      onLinkMove({ \r\n        linkId, startEvent, fromNodeId, fromPortId, \r\n        toPosition: { \r\n          x: e.clientX,\r\n          y: e.clientY,\r\n        } \r\n      })\r\n    }\r\n\r\n    // Create and bind the mouse up handler\r\n    // This is used to check if the link is complete or cancelled\r\n    const mouseUpHandler = (e: MouseEvent & { path: HTMLElement[] }) => {\r\n      // We traverse up the event path until we find an element with 'data-port-id' and data-node-id'\r\n      // e.toElement cannot be used because it may be a child element of the port\r\n      const portEl = e.path.find((el) => {\r\n        const toPortId = el.getAttribute && el.getAttribute('data-port-id')\r\n        const toNodeId = el.getAttribute && el.getAttribute('data-node-id')\r\n        return !!(toPortId && toNodeId)\r\n      })\r\n\r\n      // If both node-id and port-id are defined as data attributes, we are mouse-upping\r\n      // on another port. Run the success handler\r\n      if (portEl) {\r\n        const toPortId = portEl.getAttribute('data-port-id') as string\r\n        const toNodeId = portEl.getAttribute('data-node-id') as string\r\n        onLinkComplete({ linkId, startEvent, fromNodeId, fromPortId, toNodeId, toPortId })\r\n      } else {\r\n        onLinkCancel({ linkId, startEvent, fromNodeId, fromPortId })\r\n      }\r\n\r\n      // Remove the listeners if the link is complete or canceled\r\n      window.removeEventListener('mouseup', mouseUpHandler, false);\r\n      window.removeEventListener('mousemove', mouseMoveHandler, false);\r\n    }\r\n\r\n    // Add listeners\r\n    window.addEventListener('mouseup', mouseUpHandler, false);\r\n    window.addEventListener('mousemove', mouseMoveHandler, false);\r\n\r\n    // Notify state of link start\r\n    onLinkStart({ linkId, startEvent, fromNodeId, fromPortId })\r\n\r\n    // Prevent default and stop propagation to prevent text selection\r\n    startEvent.preventDefault()\r\n    startEvent.stopPropagation()\r\n  }\r\n  render() {\r\n    const { \r\n      chart,\r\n      style, \r\n      port, \r\n      node,\r\n      Component = PortDefault\r\n    } = this.props\r\n\r\n    const selectedLink = chart.selected.type === 'link' && chart.selected.id && chart.links[chart.selected.id]\r\n    const hoveredLink = chart.selected.type === 'link' && chart.selected.id && chart.links[chart.selected.id]\r\n\r\n    return (\r\n      <div\r\n        data-port-id={ port.id }\r\n        data-node-id={ node.id }\r\n        onMouseDown={ this.onMouseDown }\r\n        ref={ this.getNodRef } \r\n        style={ style }\r\n      >\r\n        <Component \r\n          port={ port }\r\n          isSelected={ chart.selected.type === 'port' && chart.selected.id === port.id }\r\n          isHovered={ chart.hovered.type === 'port' && chart.hovered.id === port.id }\r\n          isLinkSelected={ selectedLink \r\n            ? ((selectedLink.from.portId === port.id && selectedLink.from.nodeId === node.id) || \r\n               (selectedLink.to.portId === port.id && selectedLink.to.nodeId === node.id))\r\n            : false \r\n          }\r\n          isLinkHovered={ hoveredLink \r\n            ? ((hoveredLink.from.portId === port.id && hoveredLink.from.nodeId === node.id) || \r\n               (hoveredLink.to.portId === port.id && hoveredLink.to.nodeId === node.id))\r\n            : false \r\n          }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}","export * from './Port.default'\r\nexport * from './Port.wrapper'","import * as React from 'react'\r\nimport { filter } from 'lodash'\r\nimport { PortsGroupDefault } from '../../'\r\n\r\nexport interface IPortsDefaultProps {\r\n  children: any\r\n}\r\n\r\nexport const PortsDefault = ({ children }: IPortsDefaultProps) => {\r\n  return (\r\n    <div>\r\n      <PortsGroupDefault side=\"top\">\r\n        { filter(children, ['props.port.type', 'input']) }\r\n      </PortsGroupDefault>\r\n      <PortsGroupDefault side=\"bottom\">\r\n        { filter(children, ['props.port.type', 'output']) }\r\n      </PortsGroupDefault>\r\n    </div>\r\n  )\r\n}","export * from './Ports.default'\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport interface IPortsGroupDefaultProps {\r\n  side: 'top' | 'bottom' | 'left' | 'right'\r\n}\r\n\r\nexport const PortsGroupDefault = styled.div<IPortsGroupDefaultProps>`\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  ${props => {\r\n    if (props.side === 'top') {\r\n      return css`\r\n        width: 100%;\r\n        left: 0;\r\n        top: -12px;\r\n        flex-direction: row;\r\n        > div {\r\n          margin: 0 3px;\r\n        }\r\n      `\r\n    } else if (props.side === 'bottom') {\r\n      return css`\r\n        width: 100%;\r\n        left: 0;\r\n        bottom: -12px;\r\n        flex-direction: row;\r\n        > div {\r\n          margin: 0 3px;\r\n        }\r\n      `\r\n    } else if (props.side === 'left') {\r\n      return css`\r\n        height: 100%;\r\n        top: 0;\r\n        left: -12px;\r\n        flex-direction: column;\r\n        > div {\r\n          margin: 3px 0;\r\n        }\r\n      `\r\n    } else {\r\n      return css`\r\n        height: 100%;\r\n        top: 0;\r\n        right: -12px;\r\n        flex-direction: column;\r\n        > div {\r\n          margin: 3px 0;\r\n        }\r\n      `\r\n    }\r\n  }}\r\n`\r\n","export * from './PortsGroup.default'","export * from './Canvas'\r\nexport * from './Node'\r\nexport * from './NodeInner'\r\nexport * from './Port'\r\nexport * from './Ports'\r\nexport * from './PortsGroup'\r\nexport * from './Link'\r\nexport * from './FlowChart'","export const REACT_FLOW_CHART = 'react-flow-chart'","import * as React from \"react\"\r\nimport { FlowChart, IChart } from '../'\r\nimport * as actions from './actions'\r\nimport { mapValues } from 'lodash'\r\n\r\nexport interface IFlowChartWithStateProps {\r\n\tinitialValue: IChart\r\n}\r\n\r\n/**\r\n * Flow Chart With State\r\n */\r\nexport class FlowChartWithState extends React.Component<IFlowChartWithStateProps, IChart> {\r\n  state: IChart\r\n  constructor(props: IFlowChartWithStateProps) {\r\n    super(props)\r\n    this.state = props.initialValue\r\n\t}\r\n\trender() {\r\n\t\tconst stateActions = mapValues(actions, (func: any) => (...args: any) => this.setState(func(...args))) as typeof actions\r\n\t\treturn (\r\n\t\t\t<FlowChart\r\n\t\t\t\tchart={ this.state }\r\n\t\t\t\tcallbacks={ stateActions }\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n}","import { \r\n  IOnDragNode, IOnDragCanvas, IOnLinkStart, IOnLinkMove, IOnLinkComplete, IChart, IOnLinkCancel, \r\n  IOnPortPositionChange, IOnLinkMouseEnter, IOnLinkMouseLeave, IOnCanvasClick, IOnDeleteKey, IOnNodeClick, IOnCanvasDrop \r\n} from '../types'\r\nimport { forEach } from 'lodash'\r\nimport { v4 } from 'uuid'\r\n\r\n\r\n/**\r\n * This file contains actions for updating state after each of the required callbacks\r\n */\r\n\r\nexport const onDragNode: IOnDragNode = (event, data, id) => (chart: IChart) => {\r\n  const nodechart = chart.nodes[id]\r\n  if (nodechart) {\r\n    nodechart.position = {\r\n      x: data.x,\r\n      y: data.y\r\n    }\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onDragCanvas: IOnDragCanvas = (event, data) => (chart: IChart): IChart => {\r\n  chart.offset.x = data.x\r\n  chart.offset.y = data.y\r\n  return chart\r\n}\r\n\r\nexport const onLinkStart: IOnLinkStart = ({ linkId, fromNodeId, fromPortId }) => (chart: IChart): IChart => {\r\n  chart.links[linkId] = {\r\n    id: linkId,\r\n    from: {\r\n      nodeId: fromNodeId,\r\n      portId: fromPortId\r\n    },\r\n    to: {}\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onLinkMove: IOnLinkMove = ({ linkId, toPosition }) =>(chart: IChart): IChart => {\r\n  chart.links[linkId].to.position = toPosition\r\n  return chart\r\n}\r\n\r\nexport const onLinkComplete: IOnLinkComplete = ({ linkId, fromNodeId, toNodeId, toPortId }) =>(chart: IChart): IChart => {\r\n  if (fromNodeId !== toPortId) {\r\n    chart.links[linkId].to = {\r\n      nodeId: toNodeId,\r\n      portId: toPortId\r\n    }\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onLinkCancel: IOnLinkCancel = ({ linkId }) => (chart: IChart) => {\r\n  delete chart.links[linkId]\r\n  return chart\r\n}\r\n\r\nexport const onLinkMouseEnter: IOnLinkMouseEnter = ({ linkId }) => (chart: IChart) => {\r\n  // Set the link to hover\r\n  const link = chart.links[linkId]\r\n  // Set the connected ports to hover\r\n  if (link.to.nodeId && link.to.portId) {\r\n    chart.hovered = {\r\n      type: 'link',\r\n      id: linkId\r\n    }\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onLinkMouseLeave: IOnLinkMouseLeave = ({ linkId }) => (chart: IChart) => {\r\n  const link = chart.links[linkId]\r\n  // Set the connected ports to hover\r\n  if (link.to.nodeId && link.to.portId) {\r\n    chart.hovered = {}\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onLinkClick: IOnLinkMouseLeave = ({ linkId }) => (chart: IChart) => {\r\n  chart.selected = {\r\n    type: 'link',\r\n    id: linkId\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onCanvasClick: IOnCanvasClick = () => (chart: IChart) => {\r\n  chart.selected = {}\r\n  return chart\r\n}\r\n\r\nexport const onDeleteKey: IOnDeleteKey = () => (chart: IChart) => {\r\n  if (chart.selected.type === 'node' && chart.selected.id) {\r\n    const node = chart.nodes[chart.selected.id]\r\n    // Delete the connected links\r\n    forEach(chart.links, link => { \r\n      if (link.from.nodeId === node.id || link.to.nodeId === node.id) {\r\n        delete chart.links[link.id]\r\n      }\r\n    })\r\n    // Delete the node\r\n    delete chart.nodes[chart.selected.id]\r\n  } else if (chart.selected.type === 'link' && chart.selected.id) {\r\n    delete chart.links[chart.selected.id]\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onNodeClick: IOnNodeClick = ({ nodeId }) => (chart: IChart) => {\r\n  chart.selected = {\r\n    type: 'node',\r\n    id: nodeId\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onPortPositionChange: IOnPortPositionChange = (nodeToUpdate, port, position) => (chart: IChart): IChart => {\r\n  chart.nodes[nodeToUpdate.id].ports[port.id].position = {\r\n    x: position.x,\r\n    y: position.y\r\n  }\r\n  return chart\r\n}\r\n\r\nexport const onCanvasDrop: IOnCanvasDrop = ({ data, position }) => (chart: IChart): IChart => {\r\n  const id = v4()\r\n  chart.nodes[id] = {\r\n    id,\r\n    type: data.type,\r\n    position,\r\n    ports: {}\r\n  }\r\n  return chart\r\n}\r\n","export * from './FlowChartWithState'\r\n","export * from './components'\r\nexport * from './container'\r\nexport * from './types'\r\nexport * from './constants'","var map = {\n\t\"./WithSidebar.tsx\": \"./stories/WithSidebar.tsx\",\n\t\"./WithState.story.tsx\": \"./stories/WithState.story.tsx\",\n\t\"./components/Content.tsx\": \"./stories/components/Content.tsx\",\n\t\"./components/Page.tsx\": \"./stories/components/Page.tsx\",\n\t\"./components/Sidebar.tsx\": \"./stories/components/Sidebar.tsx\",\n\t\"./components/SidebarItem.tsx\": \"./stories/components/SidebarItem.tsx\",\n\t\"./components/index.ts\": \"./stories/components/index.ts\",\n\t\"./exampleChartState.ts\": \"./stories/exampleChartState.ts\",\n\t\"./index.tsx\": \"./stories/index.tsx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./stories sync recursive \\\\.tsx?$\";","import * as React from 'react'\r\nimport { FlowChartWithState } from '../src'\r\nimport { storiesOf } from '@storybook/react'\r\nimport { chartSimple } from './exampleChartState'\r\nimport { Page, Content, Sidebar, SidebarItem } from './components'\r\n\r\nstoriesOf(\"With Sidebar\", module)\r\n\t.add(\"default\", () => {\r\n\t\treturn (\r\n      <Page>\r\n        <Content>\r\n          <FlowChartWithState initialValue={ chartSimple } />\r\n        </Content>\r\n        <Sidebar>\r\n          <SidebarItem type=\"example-1\" />\r\n          <SidebarItem type=\"example-2\" />\r\n        </Sidebar>\r\n      </Page>\r\n    )\r\n\t})","import * as React from 'react'\nimport { FlowChartWithState } from '../src'\nimport { storiesOf } from '@storybook/react'\nimport { chartSimple } from './exampleChartState'\nimport { Page } from './components'\n\nstoriesOf(\"With State\", module)\n\t.add(\"default\", () => {\n\t\treturn (\n      <Page>\n\t\t\t\t<FlowChartWithState initialValue={ chartSimple } />\n      </Page>\n    )\n\t})","import styled from 'styled-components'\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n","import * as React from 'react'\r\nimport styled, { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0px;\r\n    max-width: 100vw;\r\n    max-height: 100vh;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n    font-family: sans-serif;\r\n  }\r\n\r\n  *, :after, :before {\r\n    box-sizing: inherit;\r\n  }\r\n`\r\n\r\nconst PageContent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1;\r\n  max-width: 100vw;\r\n  max-height: 100vh;\r\n`\r\n\r\nexport const Page = ({ children }: { children: any}) => (\r\n  <PageContent>\r\n    { children }\r\n    <GlobalStyle />\r\n  </PageContent>\r\n)","import styled from 'styled-components'\r\n\r\nexport const Sidebar = styled.div`\r\n  width: 300px;\r\n  background: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-shrink: 0;\r\n`","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport { REACT_FLOW_CHART } from '../../src'\r\n\r\nconst Outer = styled.div`\r\n  padding: 20px 30px;\r\n  font-size: 14px;\r\n  background: white;\r\n  cursor: move;\r\n`\r\n\r\nexport const SidebarItem = ({ type }: { type: string }) => {\r\n  return (\r\n    <Outer \r\n      draggable\r\n      onDragStart={ (event) => {\r\n        event.dataTransfer.setData(REACT_FLOW_CHART, JSON.stringify({ type }))\r\n      } }\r\n    >\r\n      { type }\r\n    </Outer>\r\n  )\r\n}","export * from './Content'\r\nexport * from './Page'\r\nexport * from './Sidebar'\r\nexport * from './SidebarItem'","export const chartSimple = {\r\n  offset: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  nodes: {\r\n    'node1': {\r\n      id: 'node1',\r\n      type: 'output-only',\r\n      position: {\r\n        x: 200,\r\n        y: 100\r\n      },\r\n      ports: {\r\n        port1: {\r\n          id: 'port1',\r\n          type: 'output'\r\n        },\r\n        port2: {\r\n          id: 'port2',\r\n          type: 'output'\r\n        }\r\n      }\r\n    }, \r\n    'node2': {\r\n      id: 'node2',\r\n      type: 'input-output',\r\n      position: {\r\n        x: 200,\r\n        y: 300\r\n      },\r\n      ports: {\r\n        port1:{\r\n          id: 'port1',\r\n          type: 'input'\r\n        }, \r\n        port2: {\r\n          id: 'port2',\r\n          type: 'output'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  links: {\r\n    link1: {\r\n      id: 'link1',\r\n      from: {\r\n        nodeId: 'node1',\r\n        portId: 'port2',\r\n      },\r\n      to: {\r\n        nodeId: 'node2',\r\n        portId: 'port1',\r\n      }\r\n    },\r\n  },\r\n  selected:{},\r\n  hovered:{},\r\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AAgBA;AAAA;AAAA;;AAmDA;AAlDA;AACA;AAWA;AAEA;AAMA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAAA;AAnDA;;;;;;;;;;;;;;;;;;;ACrBA;AAYA;;;;;;;;;;;;;;;;;;;;ACZA;AAMA;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAOA;AAuCA;AAEA;AAyBA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AASA;AAQA;AACA;AAgBA;;;;;;;;;;;;;;;;;;ACxHA;;;;;;;;;;;;;;;ACAA;AAcA;AACA;AASA;AAEA;AAEA;AAOA;AAOA;AAUA;AACA;AACA;AAEA;AAQA;;;;;;;;;;;;;;;AChEA;AAEA;AACA;AAWA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAYA;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACTA;;;;;;;;;;;;;;;;;;;ACAA;AAUA;AAOA;;;;;;;;;;;;;;;;ACjBA;AACA;AAEA;AAWA;AACA;AAOA;AAOA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAMA;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAOA;AAOA;AAAA;AACA;AAEA;;AAAA;AAGA;;;;;;;;;;;;;;;;;;;ACrBA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAWA;AAcA;AAQA;AAAA;AAAA;AAEA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AAEA;AACA;AAiBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAuCA;AAtCA;AACA;AAQA;AACA;AAEA;AAQA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AAAA;AA9GA;;;;;;;;;;;;;;;;;;ACpBA;AACA;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAMA;AAAA;AACA;AAEA;AAGA;AAKA;;;;;;;;;;;;;;;;;;ACnBA;;;;;;;;;;;;;;;;;;;ACAA;AAMA;AA+CA;AAzCA;AACA;AASA;AAAA;AACA;AASA;AAAA;AACA;AASA;AAAA;AACA;AASA;AACA;;;;;;;;;;;;;;;;;;;ACrDA;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAMA;;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAfA;;;;;;;;;;;;;;;ACRA;AACA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;;;;;;;;;;;;;;;;;ACjIA;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;ACbA;AAEA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAeA;AAQA;AAAA;AAAA;AAEA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;AC1BA;AAEA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AAEA;AAOA;AAAA;AACA;AAIA;AACA;AAKA;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}